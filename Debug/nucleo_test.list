
nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f8  080056f8  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080056f8  080056f8  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f8  080056f8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005700  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000060  08005760  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005760  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6b  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002197  00000000  00000000  00016af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00018c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9b  00000000  00000000  00019c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ff  00000000  00000000  0001a913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001275c  00000000  00000000  00032b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d42a  00000000  00000000  0004526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  000d26dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d6fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005634 	.word	0x08005634

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005634 	.word	0x08005634

0800014c <i2cLcd_SendByte>:

#include "main.h"
#include "i2c_lcd.h"

// Send byte or nibble to LCD module via PCF8574
uint8_t i2cLcd_SendByte(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t data, uint8_t opts){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	70bb      	strb	r3, [r7, #2]
	uint8_t i2c_frame_size;
	uint8_t n;
	uint8_t lcd_opts;

	// Select between command/data frame
	cmd = opts & I2CLCD_OPTS_RS;
 800015c:	78bb      	ldrb	r3, [r7, #2]
 800015e:	f003 0301 	and.w	r3, r3, #1
 8000162:	753b      	strb	r3, [r7, #20]

	// Toggle between waiting 1ms or poll Busy Flag
	wait_bf = opts & I2CLCD_OPTS_WAIT_BF;
 8000164:	78bb      	ldrb	r3, [r7, #2]
 8000166:	f003 0308 	and.w	r3, r3, #8
 800016a:	74fb      	strb	r3, [r7, #19]

	// Frame size for I2C communication.
	if (opts & I2CLCD_OPTS_4B) {
 800016c:	78bb      	ldrb	r3, [r7, #2]
 800016e:	f003 0302 	and.w	r3, r3, #2
 8000172:	2b00      	cmp	r3, #0
 8000174:	d002      	beq.n	800017c <i2cLcd_SendByte+0x30>
		i2c_frame_size = 2;
 8000176:	2302      	movs	r3, #2
 8000178:	75bb      	strb	r3, [r7, #22]
 800017a:	e001      	b.n	8000180 <i2cLcd_SendByte+0x34>
	}
	else {
		i2c_frame_size = 4;
 800017c:	2304      	movs	r3, #4
 800017e:	75bb      	strb	r3, [r7, #22]
	}

	// Add final all 1s on the 4 data bits to be able to read BusyFlag after a transaction
	i2c_frame_size += wait_bf;
 8000180:	7dba      	ldrb	r2, [r7, #22]
 8000182:	7cfb      	ldrb	r3, [r7, #19]
 8000184:	4413      	add	r3, r2
 8000186:	75bb      	strb	r3, [r7, #22]

	lcd_opts = (I2CLCD_RS & cmd) | (I2CLCD_BL & h_i2cLcd->blacklight) | (I2CLCD_E);
 8000188:	7d3b      	ldrb	r3, [r7, #20]
 800018a:	f003 0301 	and.w	r3, r3, #1
 800018e:	b2da      	uxtb	r2, r3
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	7adb      	ldrb	r3, [r3, #11]
 8000194:	f003 0308 	and.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	4313      	orrs	r3, r2
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f043 0304 	orr.w	r3, r3, #4
 80001a2:	74bb      	strb	r3, [r7, #18]

	i2c_frame_data[0] = (data & 0xF0) | lcd_opts;
 80001a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80001a8:	f023 030f 	bic.w	r3, r3, #15
 80001ac:	b25a      	sxtb	r2, r3
 80001ae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	b25b      	sxtb	r3, r3
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	733b      	strb	r3, [r7, #12]
	i2c_frame_data[1] = i2c_frame_data[0] & (~I2CLCD_E);
 80001ba:	7b3b      	ldrb	r3, [r7, #12]
 80001bc:	f023 0304 	bic.w	r3, r3, #4
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	737b      	strb	r3, [r7, #13]

	i2c_frame_data[2] = ((data << 4) & 0xF0) | lcd_opts;
 80001c4:	78fb      	ldrb	r3, [r7, #3]
 80001c6:	011b      	lsls	r3, r3, #4
 80001c8:	b25a      	sxtb	r2, r3
 80001ca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80001ce:	4313      	orrs	r3, r2
 80001d0:	b25b      	sxtb	r3, r3
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[3] = i2c_frame_data[2] & (~I2CLCD_E);
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0304 	bic.w	r3, r3, #4
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	73fb      	strb	r3, [r7, #15]

	// Preferably remove this
	if(wait_bf)
 80001e0:	7cfb      	ldrb	r3, [r7, #19]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d00e      	beq.n	8000204 <i2cLcd_SendByte+0xb8>
		i2c_frame_data[i2c_frame_size-1] = i2c_frame_data[i2c_frame_size-2] | 0x80;
 80001e6:	7dbb      	ldrb	r3, [r7, #22]
 80001e8:	3b02      	subs	r3, #2
 80001ea:	3318      	adds	r3, #24
 80001ec:	443b      	add	r3, r7
 80001ee:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80001f2:	7dbb      	ldrb	r3, [r7, #22]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80001fa:	b2d2      	uxtb	r2, r2
 80001fc:	3318      	adds	r3, #24
 80001fe:	443b      	add	r3, r7
 8000200:	f803 2c0c 	strb.w	r2, [r3, #-12]

	// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
	hal_stat = i2cLcd_I2cWrite(h_i2cLcd, i2c_frame_data, i2c_frame_size);
 8000204:	7dba      	ldrb	r2, [r7, #22]
 8000206:	f107 030c 	add.w	r3, r7, #12
 800020a:	4619      	mov	r1, r3
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f915 	bl	800043c <i2cLcd_I2cWrite>
 8000212:	4603      	mov	r3, r0
 8000214:	75fb      	strb	r3, [r7, #23]

	//i2cLcd_WaitBusyFlag();
	if (wait_bf) {
 8000216:	7cfb      	ldrb	r3, [r7, #19]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d01d      	beq.n	8000258 <i2cLcd_SendByte+0x10c>
		n = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	757b      	strb	r3, [r7, #21]
		do {
			hal_stat |= HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, i2c_frame_data,
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	791b      	ldrb	r3, [r3, #4]
 8000228:	4619      	mov	r1, r3
 800022a:	f107 020c 	add.w	r2, r7, #12
 800022e:	230a      	movs	r3, #10
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	f001 feb0 	bl	8001f98 <HAL_I2C_Master_Receive>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	7dfb      	ldrb	r3, [r7, #23]
 800023e:	4313      	orrs	r3, r2
 8000240:	75fb      	strb	r3, [r7, #23]
										1, 10);
			n++;
 8000242:	7d7b      	ldrb	r3, [r7, #21]
 8000244:	3301      	adds	r3, #1
 8000246:	757b      	strb	r3, [r7, #21]
		} while ( (n < I2CLCD_MAX_BF_POLLS) && (i2c_frame_data[0] & 0x80) );
 8000248:	7d7b      	ldrb	r3, [r7, #21]
 800024a:	2b7e      	cmp	r3, #126	@ 0x7e
 800024c:	d807      	bhi.n	800025e <i2cLcd_SendByte+0x112>
 800024e:	7b3b      	ldrb	r3, [r7, #12]
 8000250:	b25b      	sxtb	r3, r3
 8000252:	2b00      	cmp	r3, #0
 8000254:	dbe4      	blt.n	8000220 <i2cLcd_SendByte+0xd4>
 8000256:	e002      	b.n	800025e <i2cLcd_SendByte+0x112>
	}
	else {
		i2cLcd_Delay_ms(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f907 	bl	800046c <i2cLcd_Delay_ms>
	}

	return (uint8_t) hal_stat;
 800025e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000260:	4618      	mov	r0, r3
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <i2cLcd_SendChar>:
	return (uint8_t) hal_stat;
}



uint8_t i2cLcd_SendChar(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t chr){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	460b      	mov	r3, r1
 8000272:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, chr, I2CLCD_OPTS_DATA);
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff66 	bl	800014c <i2cLcd_SendByte>
 8000280:	4603      	mov	r3, r0
}
 8000282:	4618      	mov	r0, r3
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <i2cLcd_SendCmd>:

uint8_t i2cLcd_SendCmd(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 800028a:	b580      	push	{r7, lr}
 800028c:	b082      	sub	sp, #8
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	460b      	mov	r3, r1
 8000294:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_COMMAND | I2CLCD_OPTS_NOINIT );
 8000296:	78fb      	ldrb	r3, [r7, #3]
 8000298:	2200      	movs	r2, #0
 800029a:	4619      	mov	r1, r3
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ff55 	bl	800014c <i2cLcd_SendByte>
 80002a2:	4603      	mov	r3, r0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <i2cLcd_SendCmd_4b>:

uint8_t i2cLcd_SendCmd_4b(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_INIT );
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2202      	movs	r2, #2
 80002bc:	4619      	mov	r1, r3
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff44 	bl	800014c <i2cLcd_SendByte>
 80002c4:	4603      	mov	r3, r0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <i2cLcd_Init>:
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl );
}



uint8_t i2cLcd_Init(i2cLcd_HandleTypeDef * h_i2cLcd){
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b084      	sub	sp, #16
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	ret = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_8B;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2230      	movs	r2, #48	@ 0x30
 80002de:	721a      	strb	r2, [r3, #8]
	h_i2cLcd->blacklight = I2CLCD_BL;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2208      	movs	r2, #8
 80002e4:	72da      	strb	r2, [r3, #11]
	h_i2cLcd->entry_mode_set = MODE_SET ;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2204      	movs	r2, #4
 80002ea:	715a      	strb	r2, [r3, #5]
	h_i2cLcd->cursor_display_shift = CD_SHIFT;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2210      	movs	r2, #16
 80002f0:	71da      	strb	r2, [r3, #7]

	// As per HD44780, if reset timing cannot be generated, initilization should be a sequence
	// of 0x3 writes with specific delays afterwards

	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	7a1b      	ldrb	r3, [r3, #8]
 80002f6:	4619      	mov	r1, r3
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ffd7 	bl	80002ac <i2cLcd_SendCmd_4b>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	4313      	orrs	r3, r2
 8000306:	73fb      	strb	r3, [r7, #15]
	i2cLcd_Delay_ms(4);
 8000308:	2004      	movs	r0, #4
 800030a:	f000 f8af 	bl	800046c <i2cLcd_Delay_ms>
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7a1b      	ldrb	r3, [r3, #8]
 8000312:	4619      	mov	r1, r3
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ffc9 	bl	80002ac <i2cLcd_SendCmd_4b>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	4313      	orrs	r3, r2
 8000322:	73fb      	strb	r3, [r7, #15]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7a1b      	ldrb	r3, [r3, #8]
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffbe 	bl	80002ac <i2cLcd_SendCmd_4b>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	7bfb      	ldrb	r3, [r7, #15]
 8000336:	4313      	orrs	r3, r2
 8000338:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2220      	movs	r2, #32
 800033e:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	7a1b      	ldrb	r3, [r3, #8]
 8000344:	4619      	mov	r1, r3
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f7ff ffb0 	bl	80002ac <i2cLcd_SendCmd_4b>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	4313      	orrs	r3, r2
 8000354:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B | FUNC_SET_LINES_2 | FUNC_SET_FO_5X8;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2228      	movs	r2, #40	@ 0x28
 800035a:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->function_set);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7a1b      	ldrb	r3, [r3, #8]
 8000360:	4619      	mov	r1, r3
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff91 	bl	800028a <i2cLcd_SendCmd>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	4313      	orrs	r3, r2
 8000370:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->diplay_ctrl = DISP_CTRL | DISP_CTRL_CURSOR_ON | DISP_CTRL_BLINK_ON | DISP_CTRL_DISPLAY_ON;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	220f      	movs	r2, #15
 8000376:	719a      	strb	r2, [r3, #6]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	799b      	ldrb	r3, [r3, #6]
 800037c:	4619      	mov	r1, r3
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff83 	bl	800028a <i2cLcd_SendCmd>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	4313      	orrs	r3, r2
 800038c:	73fb      	strb	r3, [r7, #15]

	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->entry_mode_set);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	4619      	mov	r1, r3
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff78 	bl	800028a <i2cLcd_SendCmd>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	73fb      	strb	r3, [r7, #15]

	i2cLcd_ClearDisplay(h_i2cLcd);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f000 f808 	bl	80003ba <i2cLcd_ClearDisplay>

	i2cLcd_Delay_ms(5);
 80003aa:	2005      	movs	r0, #5
 80003ac:	f000 f85e 	bl	800046c <i2cLcd_Delay_ms>
	return ret;
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <i2cLcd_ClearDisplay>:



uint8_t i2cLcd_ClearDisplay(i2cLcd_HandleTypeDef * h_i2cLcd){
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]

	//return i2cLcd_SendByte(h_i2cLcd, CLR_DISPLAY, 0);
	return i2cLcd_SendCmd(h_i2cLcd, CLR_DISPLAY);
 80003c2:	2101      	movs	r1, #1
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ff60 	bl	800028a <i2cLcd_SendCmd>
 80003ca:	4603      	mov	r3, r0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <i2cLcd_SetCursorPosition>:
uint8_t i2cLcd_ReturnHome(i2cLcd_HandleTypeDef * h_i2cLcd){
	return i2cLcd_SendCmd(h_i2cLcd, RET_HOME );
}


uint8_t i2cLcd_SetCursorPosition(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t pos){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	460b      	mov	r3, r1
 80003de:	70fb      	strb	r3, [r7, #3]
	return i2cLcd_SendByte(h_i2cLcd, DDRAM_ADDR | pos, I2CLCD_OPTS_NOINIT);
 80003e0:	78fb      	ldrb	r3, [r7, #3]
 80003e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff fead 	bl	800014c <i2cLcd_SendByte>
 80003f2:	4603      	mov	r3, r0
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <i2cLcd_CreateHandle>:
	hal_stat = i2cLcd_ReadByte(h_i2cLcd, pos );
	*pos = *pos & 0x7F;
	return hal_stat;
}

uint8_t i2cLcd_CreateHandle(i2cLcd_HandleTypeDef *h_i2cLcd, I2C_HandleTypeDef *h_i2c, uint8_t i2c_slave_addr){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	4613      	mov	r3, r2
 8000408:	71fb      	strb	r3, [r7, #7]

	uint8_t init_state;
	init_state = 0x00; // all inputs of PCF
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]
	// Bind I2C HAL handler
	if (h_i2c == NULL)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d101      	bne.n	8000418 <i2cLcd_CreateHandle+0x1c>
		return -1;
 8000414:	23ff      	movs	r3, #255	@ 0xff
 8000416:	e00d      	b.n	8000434 <i2cLcd_CreateHandle+0x38>

	h_i2cLcd->hi2c = h_i2c;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	601a      	str	r2, [r3, #0]

	// Set slave address
	h_i2cLcd->i2c_addr = i2c_slave_addr;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	79fa      	ldrb	r2, [r7, #7]
 8000422:	711a      	strb	r2, [r3, #4]

	//return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, &init_state, 1, 10);
	return i2cLcd_I2cWrite(h_i2cLcd, &init_state, 1);
 8000424:	f107 0317 	add.w	r3, r7, #23
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f000 f805 	bl	800043c <i2cLcd_I2cWrite>
 8000432:	4603      	mov	r3, r0
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <i2cLcd_I2cWrite>:


// Low level function wrappers
// Can be

uint8_t i2cLcd_I2cWrite(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af02      	add	r7, sp, #8
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	4613      	mov	r3, r2
 8000448:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	4619      	mov	r1, r3
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	b29b      	uxth	r3, r3
 8000458:	220a      	movs	r2, #10
 800045a:	9200      	str	r2, [sp, #0]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	f001 fc9d 	bl	8001d9c <HAL_I2C_Master_Transmit>
 8000462:	4603      	mov	r3, r0
}
 8000464:	4618      	mov	r0, r3
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <i2cLcd_Delay_ms>:
uint8_t i2cLcd_I2cRead(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){

	return HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
}

uint8_t i2cLcd_Delay_ms(uint32_t delay_ms){
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	// Change the delay function call if HAL_ is not available
	HAL_Delay(delay_ms);
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 ff91 	bl	800139c <HAL_Delay>
	return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t i2c_lcd_addr = (0x27<<1);
 800048a:	234e      	movs	r3, #78	@ 0x4e
 800048c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f000 ff23 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000492:	f000 f853 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f9bb 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049a:	f000 f965 	bl	8000768 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800049e:	f000 f98d 	bl	80007bc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80004a2:	f000 f937 	bl	8000714 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004a6:	f000 f88f 	bl	80005c8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80004aa:	f000 f8bb 	bl	8000624 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RX_DATA_FSRH1S, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	4919      	ldr	r1, [pc, #100]	@ (8000518 <main+0x94>)
 80004b2:	481a      	ldr	r0, [pc, #104]	@ (800051c <main+0x98>)
 80004b4:	f003 fed6 	bl	8004264 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, RX_DATA_HC05, 1); // sss
 80004b8:	2201      	movs	r2, #1
 80004ba:	4919      	ldr	r1, [pc, #100]	@ (8000520 <main+0x9c>)
 80004bc:	4819      	ldr	r0, [pc, #100]	@ (8000524 <main+0xa0>)
 80004be:	f003 fed1 	bl	8004264 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, RX_DATA_FSRH1S, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	4914      	ldr	r1, [pc, #80]	@ (8000518 <main+0x94>)
 80004c6:	4818      	ldr	r0, [pc, #96]	@ (8000528 <main+0xa4>)
 80004c8:	f003 fecc 	bl	8004264 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2); // Add PWM Servo Motor
 80004cc:	2104      	movs	r1, #4
 80004ce:	4817      	ldr	r0, [pc, #92]	@ (800052c <main+0xa8>)
 80004d0:	f003 f80c 	bl	80034ec <HAL_TIM_PWM_Start>
  i2cLcd_CreateHandle(&h_lcd, &hi2c1, i2c_lcd_addr);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4915      	ldr	r1, [pc, #84]	@ (8000530 <main+0xac>)
 80004da:	4816      	ldr	r0, [pc, #88]	@ (8000534 <main+0xb0>)
 80004dc:	f7ff ff8e 	bl	80003fc <i2cLcd_CreateHandle>
  i2cLcd_Init(&h_lcd);
 80004e0:	4814      	ldr	r0, [pc, #80]	@ (8000534 <main+0xb0>)
 80004e2:	f7ff fef4 	bl	80002ce <i2cLcd_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  switch(flag)
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <main+0xb4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d00e      	beq.n	800050c <main+0x88>
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	dc0f      	bgt.n	8000512 <main+0x8e>
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d002      	beq.n	80004fc <main+0x78>
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <main+0x7e>
		  		  break;
		  	  case 2 :
		  		  i2cLcd_intruder();
		  		  break;
		  	  default :
		  		  break;
 80004fa:	e00a      	b.n	8000512 <main+0x8e>
		  		  i2cLcd_HelloGuest();
 80004fc:	f000 fb68 	bl	8000bd0 <i2cLcd_HelloGuest>
			  	  break;
 8000500:	e008      	b.n	8000514 <main+0x90>
		  		  i2cLcd_HelloUser();
 8000502:	f000 fbed 	bl	8000ce0 <i2cLcd_HelloUser>
		  		  PWM_Serovomotor();
 8000506:	f000 fc3f 	bl	8000d88 <PWM_Serovomotor>
		  		  break;
 800050a:	e003      	b.n	8000514 <main+0x90>
		  		  i2cLcd_intruder();
 800050c:	f000 fbb4 	bl	8000c78 <i2cLcd_intruder>
		  		  break;
 8000510:	e000      	b.n	8000514 <main+0x90>
		  		  break;
 8000512:	bf00      	nop
		  switch(flag)
 8000514:	e7e7      	b.n	80004e6 <main+0x62>
 8000516:	bf00      	nop
 8000518:	200001f4 	.word	0x200001f4
 800051c:	20000160 	.word	0x20000160
 8000520:	200001fc 	.word	0x200001fc
 8000524:	200001a8 	.word	0x200001a8
 8000528:	20000118 	.word	0x20000118
 800052c:	200000d0 	.word	0x200000d0
 8000530:	2000007c 	.word	0x2000007c
 8000534:	2000021c 	.word	0x2000021c
 8000538:	20000218 	.word	0x20000218

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	@ 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fbe2 	bl	8004d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f002 faf9 	bl	8002b7c <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000590:	f000 fc24 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fd66 	bl	8003080 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 fc0f 	bl	8000ddc <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	@ 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	@ (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 254;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	22fe      	movs	r2, #254	@ 0xfe
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f001 fa85 	bl	8001b14 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fbe4 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000007c 	.word	0x2000007c
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000654:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_TIM3_Init+0xec>)
 8000658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1440-1;
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <MX_TIM3_Init+0xe8>)
 800065c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <MX_TIM3_Init+0xe8>)
 800066a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800066e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800067c:	4823      	ldr	r0, [pc, #140]	@ (800070c <MX_TIM3_Init+0xe8>)
 800067e:	f002 fe8d 	bl	800339c <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000688:	f000 fba8 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000696:	4619      	mov	r1, r3
 8000698:	481c      	ldr	r0, [pc, #112]	@ (800070c <MX_TIM3_Init+0xe8>)
 800069a:	f003 f993 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80006a4:	f000 fb9a 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a8:	4818      	ldr	r0, [pc, #96]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006aa:	f002 fec6 	bl	800343a <HAL_TIM_PWM_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006b4:	f000 fb92 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4619      	mov	r1, r3
 80006c6:	4811      	ldr	r0, [pc, #68]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006c8:	f003 fd0c 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006d2:	f000 fb83 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d6:	2360      	movs	r3, #96	@ 0x60
 80006d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80006da:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4807      	ldr	r0, [pc, #28]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006f0:	f003 f8a6 	bl	8003840 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80006fa:	f000 fb6f 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006fe:	4803      	ldr	r0, [pc, #12]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000700:	f000 fc1a 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000704:	bf00      	nop
 8000706:	3738      	adds	r7, #56	@ 0x38
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d0 	.word	0x200000d0
 8000710:	40000400 	.word	0x40000400

08000714 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_USART1_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000720:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART1_UART_Init+0x4c>)
 800074c:	f003 fd3a 	bl	80041c4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 fb41 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000118 	.word	0x20000118
 8000764:	40013800 	.word	0x40013800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f003 fd10 	bl	80041c4 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 fb17 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000160 	.word	0x20000160
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART3_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART3_UART_Init+0x4c>)
 80007f4:	f003 fce6 	bl	80041c4 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 faed 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001a8 	.word	0x200001a8
 800080c:	40004800 	.word	0x40004800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000824:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a2c      	ldr	r2, [pc, #176]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a26      	ldr	r2, [pc, #152]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a20      	ldr	r2, [pc, #128]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <MX_GPIO_Init+0xcc>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800088a:	f001 f8ef 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_GPIO_Init+0xd4>)
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_GPIO_Init+0xd8>)
 80008a4:	f000 ff5e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 80008c0:	f000 ff50 	bl	8001764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2028      	movs	r0, #40	@ 0x28
 80008ca:	f000 fe62 	bl	8001592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ce:	2028      	movs	r0, #40	@ 0x28
 80008d0:	f000 fe7b 	bl	80015ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800
 80008e4:	10110000 	.word	0x10110000
 80008e8:	40011000 	.word	0x40011000

080008ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
   */
 // HAL_UART_Transmit(&huart2, RX_DATA_FSRH1S, 6,100);
  uint8_t i;
  uint8_t j;
  /* UART1 = RFID UART2 = main computer UART3 = HC-05*/
  if(huart ->Instance == USART1)// && huart -> Instance != USART3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a42      	ldr	r2, [pc, #264]	@ (8000a04 <HAL_UART_RxCpltCallback+0x118>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d13c      	bne.n	8000978 <HAL_UART_RxCpltCallback+0x8c>
  {
	  	  if(RX_FSRH1S_INDX == 0 || RX_FSRH1S_INDX == FSRH1S_MAX_LENGTH) //rx_index Arry Initialization
 80008fe:	4b42      	ldr	r3, [pc, #264]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d005      	beq.n	8000912 <HAL_UART_RxCpltCallback+0x26>
 8000906:	4b40      	ldr	r3, [pc, #256]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <HAL_UART_RxCpltCallback+0x120>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d11c      	bne.n	800094c <HAL_UART_RxCpltCallback+0x60>
	  	  {
	  		  for(i=0;i<FSRH1S_MAX_LENGTH;i++)
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e006      	b.n	8000926 <HAL_UART_RxCpltCallback+0x3a>
	  		  {
	  			  RX_FSRH1S_BUFFER[i] = 0;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a10 <HAL_UART_RxCpltCallback+0x124>)
 800091c:	2100      	movs	r1, #0
 800091e:	54d1      	strb	r1, [r2, r3]
	  		  for(i=0;i<FSRH1S_MAX_LENGTH;i++)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <HAL_UART_RxCpltCallback+0x120>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	d3f3      	bcc.n	8000918 <HAL_UART_RxCpltCallback+0x2c>
	  		  }
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	4837      	ldr	r0, [pc, #220]	@ (8000a14 <HAL_UART_RxCpltCallback+0x128>)
 8000936:	f001 f899 	bl	8001a6c <HAL_GPIO_WritePin>

	  		  if(RX_FSRH1S_INDX == FSRH1S_MAX_LENGTH)
 800093a:	4b33      	ldr	r3, [pc, #204]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <HAL_UART_RxCpltCallback+0x120>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d102      	bne.n	800094c <HAL_UART_RxCpltCallback+0x60>
	  		  {
	  			  RX_FSRH1S_INDX = 0;
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }

	  	  if(RX_DATA_FSRH1S[0] != 13)
 800094c:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <HAL_UART_RxCpltCallback+0x12c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b0d      	cmp	r3, #13
 8000952:	d00a      	beq.n	800096a <HAL_UART_RxCpltCallback+0x7e>
	  	  {
	  		RX_FSRH1S_BUFFER[RX_FSRH1S_INDX++] = RX_DATA_FSRH1S[0];
 8000954:	4b2c      	ldr	r3, [pc, #176]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	b2d1      	uxtb	r1, r2
 800095c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a08 <HAL_UART_RxCpltCallback+0x11c>)
 800095e:	7011      	strb	r1, [r2, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <HAL_UART_RxCpltCallback+0x12c>)
 8000964:	7819      	ldrb	r1, [r3, #0]
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <HAL_UART_RxCpltCallback+0x124>)
 8000968:	5499      	strb	r1, [r3, r2]
	  	  }

	  	  RFID_SECERN_USER();
 800096a:	f000 f865 	bl	8000a38 <RFID_SECERN_USER>
	  HAL_UART_Receive_IT(&huart1, RX_DATA_FSRH1S, 1); //RFID Tag receive!!
 800096e:	2201      	movs	r2, #1
 8000970:	4929      	ldr	r1, [pc, #164]	@ (8000a18 <HAL_UART_RxCpltCallback+0x12c>)
 8000972:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <HAL_UART_RxCpltCallback+0x130>)
 8000974:	f003 fc76 	bl	8004264 <HAL_UART_Receive_IT>
  }
  if(huart ->Instance == USART3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <HAL_UART_RxCpltCallback+0x134>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d137      	bne.n	80009f2 <HAL_UART_RxCpltCallback+0x106>
  {
		  if(RX_HC05_INDX == 0 || RX_HC05_INDX == HC05_MAX_LENGTH) //rx_index Arry Initialization
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d005      	beq.n	8000996 <HAL_UART_RxCpltCallback+0xaa>
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <HAL_UART_RxCpltCallback+0x13c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d11c      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0xe4>
		  {
			  for(j=0;j<HC05_MAX_LENGTH;j++)
 8000996:	2300      	movs	r3, #0
 8000998:	73bb      	strb	r3, [r7, #14]
 800099a:	e006      	b.n	80009aa <HAL_UART_RxCpltCallback+0xbe>
			  {
				  RX_HC05_BUFFER[j] = 0;
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <HAL_UART_RxCpltCallback+0x140>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	54d1      	strb	r1, [r2, r3]
			  for(j=0;j<HC05_MAX_LENGTH;j++)
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	3301      	adds	r3, #1
 80009a8:	73bb      	strb	r3, [r7, #14]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_UART_RxCpltCallback+0x13c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	7bba      	ldrb	r2, [r7, #14]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d3f3      	bcc.n	800099c <HAL_UART_RxCpltCallback+0xb0>
			  }
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <HAL_UART_RxCpltCallback+0x128>)
 80009ba:	f001 f857 	bl	8001a6c <HAL_GPIO_WritePin>

			  if(RX_HC05_INDX == HC05_MAX_LENGTH)
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_UART_RxCpltCallback+0x13c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d102      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0xe4>
			  {
				  RX_HC05_INDX = 0;
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(RX_DATA_HC05[0] != 13)
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_UART_RxCpltCallback+0x144>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b0d      	cmp	r3, #13
 80009d6:	d00a      	beq.n	80009ee <HAL_UART_RxCpltCallback+0x102>
		  {
			  RX_HC05_BUFFER[RX_HC05_INDX++] = RX_DATA_HC05[0];
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	b2d1      	uxtb	r1, r2
 80009e0:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_RxCpltCallback+0x138>)
 80009e2:	7011      	strb	r1, [r2, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_UART_RxCpltCallback+0x144>)
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <HAL_UART_RxCpltCallback+0x140>)
 80009ec:	5499      	strb	r1, [r3, r2]
		  }
		  HC05_identification();
 80009ee:	f000 f8c7 	bl	8000b80 <HC05_identification>
  }

  	  HAL_UART_Receive_IT(&huart3, RX_DATA_HC05, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	490e      	ldr	r1, [pc, #56]	@ (8000a30 <HAL_UART_RxCpltCallback+0x144>)
 80009f6:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <HAL_UART_RxCpltCallback+0x148>)
 80009f8:	f003 fc34 	bl	8004264 <HAL_UART_Receive_IT>

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	200001f0 	.word	0x200001f0
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000204 	.word	0x20000204
 8000a14:	40010800 	.word	0x40010800
 8000a18:	200001f4 	.word	0x200001f4
 8000a1c:	20000118 	.word	0x20000118
 8000a20:	40004800 	.word	0x40004800
 8000a24:	200001f1 	.word	0x200001f1
 8000a28:	20000001 	.word	0x20000001
 8000a2c:	20000214 	.word	0x20000214
 8000a30:	200001fc 	.word	0x200001fc
 8000a34:	200001a8 	.word	0x200001a8

08000a38 <RFID_SECERN_USER>:

void RFID_SECERN_USER() //get UID code and secern
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
			if(RX_FSRH1S_BUFFER[0] == 0x33 && RX_FSRH1S_BUFFER[1] == 0x0E && RX_FSRH1S_BUFFER[2] == 0x1A)
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b33      	cmp	r3, #51	@ 0x33
 8000a42:	f040 8095 	bne.w	8000b70 <RFID_SECERN_USER+0x138>
 8000a46:	4b4b      	ldr	r3, [pc, #300]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	2b0e      	cmp	r3, #14
 8000a4c:	f040 8090 	bne.w	8000b70 <RFID_SECERN_USER+0x138>
 8000a50:	4b48      	ldr	r3, [pc, #288]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	2b1a      	cmp	r3, #26
 8000a56:	f040 808b 	bne.w	8000b70 <RFID_SECERN_USER+0x138>
		  {
		  		  if(RX_FSRH1S_BUFFER[5] == 0x6D && RX_FSRH1S_BUFFER[6] == 0x16 && RX_FSRH1S_BUFFER[7] == 0x21 && RX_FSRH1S_BUFFER[8] == 0xC2 && RX_FSRH1S_BUFFER[9] == 0x50 && RX_FSRH1S_BUFFER[10] == 0x01 && RX_FSRH1S_BUFFER[11] == 0x04 && RX_FSRH1S_BUFFER[12] == 0xE0 && RX_FSRH1S_BUFFER[13] == 0x99)
 8000a5a:	4b46      	ldr	r3, [pc, #280]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a5c:	795b      	ldrb	r3, [r3, #5]
 8000a5e:	2b6d      	cmp	r3, #109	@ 0x6d
 8000a60:	d128      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a62:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a64:	799b      	ldrb	r3, [r3, #6]
 8000a66:	2b16      	cmp	r3, #22
 8000a68:	d124      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a6c:	79db      	ldrb	r3, [r3, #7]
 8000a6e:	2b21      	cmp	r3, #33	@ 0x21
 8000a70:	d120      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a72:	4b40      	ldr	r3, [pc, #256]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a74:	7a1b      	ldrb	r3, [r3, #8]
 8000a76:	2bc2      	cmp	r3, #194	@ 0xc2
 8000a78:	d11c      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a7c:	7a5b      	ldrb	r3, [r3, #9]
 8000a7e:	2b50      	cmp	r3, #80	@ 0x50
 8000a80:	d118      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a84:	7a9b      	ldrb	r3, [r3, #10]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d114      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a8c:	7adb      	ldrb	r3, [r3, #11]
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	d110      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a92:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a94:	7b1b      	ldrb	r3, [r3, #12]
 8000a96:	2be0      	cmp	r3, #224	@ 0xe0
 8000a98:	d10c      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000a9c:	7b5b      	ldrb	r3, [r3, #13]
 8000a9e:	2b99      	cmp	r3, #153	@ 0x99
 8000aa0:	d108      	bne.n	8000ab4 <RFID_SECERN_USER+0x7c>
				{
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <RFID_SECERN_USER+0x140>)
 8000aa8:	f000 ffe0 	bl	8001a6c <HAL_GPIO_WritePin>
					flag =1;
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <RFID_SECERN_USER+0x144>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e05d      	b.n	8000b70 <RFID_SECERN_USER+0x138>
				}
		  		  else if(RX_FSRH1S_BUFFER[5] == 0x2D && RX_FSRH1S_BUFFER[6] == 0x00 && RX_FSRH1S_BUFFER[7] == 0x21 && RX_FSRH1S_BUFFER[8] == 0xC2 && RX_FSRH1S_BUFFER[9] == 0x50 && RX_FSRH1S_BUFFER[10] == 0x01 && RX_FSRH1S_BUFFER[11] == 0x04 && RX_FSRH1S_BUFFER[12] == 0xE0 && RX_FSRH1S_BUFFER[13] == 0x99)
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	2b2d      	cmp	r3, #45	@ 0x2d
 8000aba:	d128      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000abc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d124      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	2b21      	cmp	r3, #33	@ 0x21
 8000aca:	d120      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	2bc2      	cmp	r3, #194	@ 0xc2
 8000ad2:	d11c      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ad6:	7a5b      	ldrb	r3, [r3, #9]
 8000ad8:	2b50      	cmp	r3, #80	@ 0x50
 8000ada:	d118      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ade:	7a9b      	ldrb	r3, [r3, #10]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d114      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000ae6:	7adb      	ldrb	r3, [r3, #11]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d110      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000aec:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000aee:	7b1b      	ldrb	r3, [r3, #12]
 8000af0:	2be0      	cmp	r3, #224	@ 0xe0
 8000af2:	d10c      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000af6:	7b5b      	ldrb	r3, [r3, #13]
 8000af8:	2b99      	cmp	r3, #153	@ 0x99
 8000afa:	d108      	bne.n	8000b0e <RFID_SECERN_USER+0xd6>
		  		{
		  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2120      	movs	r1, #32
 8000b00:	481d      	ldr	r0, [pc, #116]	@ (8000b78 <RFID_SECERN_USER+0x140>)
 8000b02:	f000 ffb3 	bl	8001a6c <HAL_GPIO_WritePin>
		  			flag =1;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <RFID_SECERN_USER+0x144>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	e030      	b.n	8000b70 <RFID_SECERN_USER+0x138>
		  		}
		  		  else if(RX_FSRH1S_BUFFER[5] == 0x42 && RX_FSRH1S_BUFFER[6] == 0x1D && RX_FSRH1S_BUFFER[7] == 0x21 && RX_FSRH1S_BUFFER[8] == 0xC2 && RX_FSRH1S_BUFFER[9] == 0x50 && RX_FSRH1S_BUFFER[10] == 0x01 && RX_FSRH1S_BUFFER[11] == 0x04 && RX_FSRH1S_BUFFER[12] == 0xE0 && RX_FSRH1S_BUFFER[13] == 0x99)
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b42      	cmp	r3, #66	@ 0x42
 8000b14:	d128      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b18:	799b      	ldrb	r3, [r3, #6]
 8000b1a:	2b1d      	cmp	r3, #29
 8000b1c:	d124      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b20:	79db      	ldrb	r3, [r3, #7]
 8000b22:	2b21      	cmp	r3, #33	@ 0x21
 8000b24:	d120      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	2bc2      	cmp	r3, #194	@ 0xc2
 8000b2c:	d11c      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b30:	7a5b      	ldrb	r3, [r3, #9]
 8000b32:	2b50      	cmp	r3, #80	@ 0x50
 8000b34:	d118      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b38:	7a9b      	ldrb	r3, [r3, #10]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d114      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b40:	7adb      	ldrb	r3, [r3, #11]
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d110      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b48:	7b1b      	ldrb	r3, [r3, #12]
 8000b4a:	2be0      	cmp	r3, #224	@ 0xe0
 8000b4c:	d10c      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <RFID_SECERN_USER+0x13c>)
 8000b50:	7b5b      	ldrb	r3, [r3, #13]
 8000b52:	2b99      	cmp	r3, #153	@ 0x99
 8000b54:	d108      	bne.n	8000b68 <RFID_SECERN_USER+0x130>
		  		{
		  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <RFID_SECERN_USER+0x140>)
 8000b5c:	f000 ff86 	bl	8001a6c <HAL_GPIO_WritePin>
		  			flag =1;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <RFID_SECERN_USER+0x144>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e003      	b.n	8000b70 <RFID_SECERN_USER+0x138>
		  		}
		  		else
		  			flag = 2;
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <RFID_SECERN_USER+0x144>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	701a      	strb	r2, [r3, #0]
		  }
}
 8000b6e:	e7ff      	b.n	8000b70 <RFID_SECERN_USER+0x138>
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000204 	.word	0x20000204
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	20000218 	.word	0x20000218

08000b80 <HC05_identification>:
void HC05_identification()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

	if(RX_HC05_BUFFER[0] == 0x31 && RX_HC05_BUFFER[1] == 0x32 && RX_HC05_BUFFER[2] == 0x33 && RX_HC05_BUFFER[3] == 0x34)
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HC05_identification+0x44>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b31      	cmp	r3, #49	@ 0x31
 8000b8a:	d114      	bne.n	8000bb6 <HC05_identification+0x36>
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HC05_identification+0x44>)
 8000b8e:	785b      	ldrb	r3, [r3, #1]
 8000b90:	2b32      	cmp	r3, #50	@ 0x32
 8000b92:	d110      	bne.n	8000bb6 <HC05_identification+0x36>
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HC05_identification+0x44>)
 8000b96:	789b      	ldrb	r3, [r3, #2]
 8000b98:	2b33      	cmp	r3, #51	@ 0x33
 8000b9a:	d10c      	bne.n	8000bb6 <HC05_identification+0x36>
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HC05_identification+0x44>)
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	2b34      	cmp	r3, #52	@ 0x34
 8000ba2:	d108      	bne.n	8000bb6 <HC05_identification+0x36>
	{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <HC05_identification+0x48>)
 8000baa:	f000 ff5f 	bl	8001a6c <HAL_GPIO_WritePin>
		flag = 1;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <HC05_identification+0x4c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e003      	b.n	8000bbe <HC05_identification+0x3e>
	}
	else
		flag = 2;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HC05_identification+0x4c>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000214 	.word	0x20000214
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000218 	.word	0x20000218

08000bd0 <i2cLcd_HelloGuest>:

void i2cLcd_HelloGuest()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	      uint8_t i=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]

		  i2cLcd_ClearDisplay(&h_lcd);
 8000bda:	4823      	ldr	r0, [pc, #140]	@ (8000c68 <i2cLcd_HelloGuest+0x98>)
 8000bdc:	f7ff fbed 	bl	80003ba <i2cLcd_ClearDisplay>
		  HAL_Delay(20);
 8000be0:	2014      	movs	r0, #20
 8000be2:	f000 fbdb 	bl	800139c <HAL_Delay>
		  i2cLcd_SetCursorPosition(&h_lcd, 0x00);
 8000be6:	2100      	movs	r1, #0
 8000be8:	481f      	ldr	r0, [pc, #124]	@ (8000c68 <i2cLcd_HelloGuest+0x98>)
 8000bea:	f7ff fbf3 	bl	80003d4 <i2cLcd_SetCursorPosition>
		  sprintf(strData,"Hello guest!!");
 8000bee:	491f      	ldr	r1, [pc, #124]	@ (8000c6c <i2cLcd_HelloGuest+0x9c>)
 8000bf0:	481f      	ldr	r0, [pc, #124]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000bf2:	f004 f86f 	bl	8004cd4 <siprintf>
		  HAL_Delay(20);
 8000bf6:	2014      	movs	r0, #20
 8000bf8:	f000 fbd0 	bl	800139c <HAL_Delay>
			  while(strData[i])
 8000bfc:	e00c      	b.n	8000c18 <i2cLcd_HelloGuest+0x48>
			  {
				  i2cLcd_SendChar(&h_lcd, strData[i]);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <i2cLcd_HelloGuest+0x98>)
 8000c08:	f7ff fb2e 	bl	8000268 <i2cLcd_SendChar>
				  HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	@ 0x64
 8000c0e:	f000 fbc5 	bl	800139c <HAL_Delay>
				  i++;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	3301      	adds	r3, #1
 8000c16:	71fb      	strb	r3, [r7, #7]
			  while(strData[i])
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1ed      	bne.n	8000bfe <i2cLcd_HelloGuest+0x2e>
			  }
		  i2cLcd_SetCursorPosition(&h_lcd, 0x40);
 8000c22:	2140      	movs	r1, #64	@ 0x40
 8000c24:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <i2cLcd_HelloGuest+0x98>)
 8000c26:	f7ff fbd5 	bl	80003d4 <i2cLcd_SetCursorPosition>
		  i=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
		  sprintf(strData,"Tag your UID");
 8000c2e:	4911      	ldr	r1, [pc, #68]	@ (8000c74 <i2cLcd_HelloGuest+0xa4>)
 8000c30:	480f      	ldr	r0, [pc, #60]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000c32:	f004 f84f 	bl	8004cd4 <siprintf>
			  while(strData[i])
 8000c36:	e00c      	b.n	8000c52 <i2cLcd_HelloGuest+0x82>
			  {
				  i2cLcd_SendChar(&h_lcd, strData[i]);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <i2cLcd_HelloGuest+0x98>)
 8000c42:	f7ff fb11 	bl	8000268 <i2cLcd_SendChar>
				  HAL_Delay(100);
 8000c46:	2064      	movs	r0, #100	@ 0x64
 8000c48:	f000 fba8 	bl	800139c <HAL_Delay>
				  i++;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
			  while(strData[i])
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <i2cLcd_HelloGuest+0xa0>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ed      	bne.n	8000c38 <i2cLcd_HelloGuest+0x68>
			  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000021c 	.word	0x2000021c
 8000c6c:	0800564c 	.word	0x0800564c
 8000c70:	20000228 	.word	0x20000228
 8000c74:	0800565c 	.word	0x0800565c

08000c78 <i2cLcd_intruder>:

void i2cLcd_intruder()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	        uint8_t i=0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
			i2cLcd_ClearDisplay(&h_lcd);
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <i2cLcd_intruder+0x5c>)
 8000c84:	f7ff fb99 	bl	80003ba <i2cLcd_ClearDisplay>
			HAL_Delay(20);
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f000 fb87 	bl	800139c <HAL_Delay>
			i2cLcd_SetCursorPosition(&h_lcd, 0x00);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <i2cLcd_intruder+0x5c>)
 8000c92:	f7ff fb9f 	bl	80003d4 <i2cLcd_SetCursorPosition>
			sprintf(strData,"Error!! Error!");
 8000c96:	4910      	ldr	r1, [pc, #64]	@ (8000cd8 <i2cLcd_intruder+0x60>)
 8000c98:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <i2cLcd_intruder+0x64>)
 8000c9a:	f004 f81b 	bl	8004cd4 <siprintf>
			HAL_Delay(20);
 8000c9e:	2014      	movs	r0, #20
 8000ca0:	f000 fb7c 	bl	800139c <HAL_Delay>
			while(strData[i])
 8000ca4:	e00c      	b.n	8000cc0 <i2cLcd_intruder+0x48>
			{
				i2cLcd_SendChar(&h_lcd, strData[i]);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <i2cLcd_intruder+0x64>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4809      	ldr	r0, [pc, #36]	@ (8000cd4 <i2cLcd_intruder+0x5c>)
 8000cb0:	f7ff fada 	bl	8000268 <i2cLcd_SendChar>
				HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	@ 0x64
 8000cb6:	f000 fb71 	bl	800139c <HAL_Delay>
				i++;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	71fb      	strb	r3, [r7, #7]
			while(strData[i])
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <i2cLcd_intruder+0x64>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ed      	bne.n	8000ca6 <i2cLcd_intruder+0x2e>
			}

}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000021c 	.word	0x2000021c
 8000cd8:	0800566c 	.word	0x0800566c
 8000cdc:	20000228 	.word	0x20000228

08000ce0 <i2cLcd_HelloUser>:

void i2cLcd_HelloUser()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	        uint8_t i=0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
			i2cLcd_ClearDisplay(&h_lcd);
 8000cea:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <i2cLcd_HelloUser+0x98>)
 8000cec:	f7ff fb65 	bl	80003ba <i2cLcd_ClearDisplay>
			HAL_Delay(20);
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f000 fb53 	bl	800139c <HAL_Delay>
			i2cLcd_SetCursorPosition(&h_lcd, 0x00);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	481f      	ldr	r0, [pc, #124]	@ (8000d78 <i2cLcd_HelloUser+0x98>)
 8000cfa:	f7ff fb6b 	bl	80003d4 <i2cLcd_SetCursorPosition>
			sprintf(strData,"Welcome!!");
 8000cfe:	491f      	ldr	r1, [pc, #124]	@ (8000d7c <i2cLcd_HelloUser+0x9c>)
 8000d00:	481f      	ldr	r0, [pc, #124]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d02:	f003 ffe7 	bl	8004cd4 <siprintf>
			HAL_Delay(20);
 8000d06:	2014      	movs	r0, #20
 8000d08:	f000 fb48 	bl	800139c <HAL_Delay>
			while(strData[i])
 8000d0c:	e00c      	b.n	8000d28 <i2cLcd_HelloUser+0x48>
			{
				i2cLcd_SendChar(&h_lcd, strData[i]);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <i2cLcd_HelloUser+0x98>)
 8000d18:	f7ff faa6 	bl	8000268 <i2cLcd_SendChar>
				HAL_Delay(100);
 8000d1c:	2064      	movs	r0, #100	@ 0x64
 8000d1e:	f000 fb3d 	bl	800139c <HAL_Delay>
				i++;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	3301      	adds	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
			while(strData[i])
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a15      	ldr	r2, [pc, #84]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1ed      	bne.n	8000d0e <i2cLcd_HelloUser+0x2e>
			}
			i2cLcd_SetCursorPosition(&h_lcd, 0x40);
 8000d32:	2140      	movs	r1, #64	@ 0x40
 8000d34:	4810      	ldr	r0, [pc, #64]	@ (8000d78 <i2cLcd_HelloUser+0x98>)
 8000d36:	f7ff fb4d 	bl	80003d4 <i2cLcd_SetCursorPosition>
			i=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
			sprintf(strData,"open the door!");
 8000d3e:	4911      	ldr	r1, [pc, #68]	@ (8000d84 <i2cLcd_HelloUser+0xa4>)
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d42:	f003 ffc7 	bl	8004cd4 <siprintf>
			 while(strData[i])
 8000d46:	e00c      	b.n	8000d62 <i2cLcd_HelloUser+0x82>
		    {
				i2cLcd_SendChar(&h_lcd, strData[i]);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d4c:	5cd3      	ldrb	r3, [r2, r3]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <i2cLcd_HelloUser+0x98>)
 8000d52:	f7ff fa89 	bl	8000268 <i2cLcd_SendChar>
				HAL_Delay(100);
 8000d56:	2064      	movs	r0, #100	@ 0x64
 8000d58:	f000 fb20 	bl	800139c <HAL_Delay>
				i++;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	71fb      	strb	r3, [r7, #7]
			 while(strData[i])
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <i2cLcd_HelloUser+0xa0>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1ed      	bne.n	8000d48 <i2cLcd_HelloUser+0x68>
		    }

}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000021c 	.word	0x2000021c
 8000d7c:	0800567c 	.word	0x0800567c
 8000d80:	20000228 	.word	0x20000228
 8000d84:	08005688 	.word	0x08005688

08000d88 <PWM_Serovomotor>:

void PWM_Serovomotor()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,125); //open
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <PWM_Serovomotor+0x28>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	227d      	movs	r2, #125	@ 0x7d
 8000d92:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(3000); // 1000ms
 8000d94:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d98:	f000 fb00 	bl	800139c <HAL_Delay>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 25); //close
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <PWM_Serovomotor+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2219      	movs	r2, #25
 8000da2:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(500); // 1000ms
 8000da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000da8:	f000 faf8 	bl	800139c <HAL_Delay>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000d0 	.word	0x200000d0

08000db4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dc4:	d103      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000dca:	f000 fe67 	bl	8001a9c <HAL_GPIO_TogglePin>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010800 	.word	0x40010800

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_MspInit+0x60>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_MspInit+0x60>)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <HAL_I2C_MspInit+0x90>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d132      	bne.n	8000ed2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4812      	ldr	r0, [pc, #72]	@ (8000ee4 <HAL_I2C_MspInit+0x98>)
 8000e9a:	f000 fc63 	bl	8001764 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_I2C_MspInit+0x9c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <HAL_I2C_MspInit+0x9c>)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_I2C_MspInit+0x94>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201d      	movs	r0, #29
 8000f1c:	f000 fb39 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f000 fb52 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <HAL_TIM_MspPostInit+0x58>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d117      	bne.n	8000f88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_TIM_MspPostInit+0x5c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_TIM_MspPostInit+0x5c>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_TIM_MspPostInit+0x5c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_TIM_MspPostInit+0x60>)
 8000f84:	f000 fbee 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40000400 	.word	0x40000400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010800 	.word	0x40010800

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	@ 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a62      	ldr	r2, [pc, #392]	@ (8001140 <HAL_UART_MspInit+0x1a4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d13a      	bne.n	8001032 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbc:	4b61      	ldr	r3, [pc, #388]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a60      	ldr	r2, [pc, #384]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd0:	623b      	str	r3, [r7, #32]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b58      	ldr	r3, [pc, #352]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4851      	ldr	r0, [pc, #324]	@ (8001148 <HAL_UART_MspInit+0x1ac>)
 8001002:	f000 fbaf 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	484b      	ldr	r0, [pc, #300]	@ (8001148 <HAL_UART_MspInit+0x1ac>)
 800101c:	f000 fba2 	bl	8001764 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2025      	movs	r0, #37	@ 0x25
 8001026:	f000 fab4 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800102a:	2025      	movs	r0, #37	@ 0x25
 800102c:	f000 facd 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001030:	e082      	b.n	8001138 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a45      	ldr	r2, [pc, #276]	@ (800114c <HAL_UART_MspInit+0x1b0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d12c      	bne.n	8001096 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800103c:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4a40      	ldr	r2, [pc, #256]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8001042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001046:	61d3      	str	r3, [r2, #28]
 8001048:	4b3e      	ldr	r3, [pc, #248]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a3a      	ldr	r2, [pc, #232]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800106c:	230c      	movs	r3, #12
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4832      	ldr	r0, [pc, #200]	@ (8001148 <HAL_UART_MspInit+0x1ac>)
 8001080:	f000 fb70 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2026      	movs	r0, #38	@ 0x26
 800108a:	f000 fa82 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800108e:	2026      	movs	r0, #38	@ 0x26
 8001090:	f000 fa9b 	bl	80015ca <HAL_NVIC_EnableIRQ>
}
 8001094:	e050      	b.n	8001138 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a2d      	ldr	r2, [pc, #180]	@ (8001150 <HAL_UART_MspInit+0x1b4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d14b      	bne.n	8001138 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010aa:	61d3      	str	r3, [r2, #28]
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_UART_MspInit+0x1a8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	481b      	ldr	r0, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0x1b8>)
 80010e6:	f000 fb3d 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4815      	ldr	r0, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x1b8>)
 8001100:	f000 fb30 	bl	8001764 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_UART_MspInit+0x1bc>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
 800111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
 8001122:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <HAL_UART_MspInit+0x1bc>)
 8001124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001126:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2027      	movs	r0, #39	@ 0x27
 800112e:	f000 fa30 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001132:	2027      	movs	r0, #39	@ 0x27
 8001134:	f000 fa49 	bl	80015ca <HAL_NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3738      	adds	r7, #56	@ 0x38
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40013800 	.word	0x40013800
 8001144:	40021000 	.word	0x40021000
 8001148:	40010800 	.word	0x40010800
 800114c:	40004400 	.word	0x40004400
 8001150:	40004800 	.word	0x40004800
 8001154:	40011000 	.word	0x40011000
 8001158:	40010000 	.word	0x40010000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8da 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM3_IRQHandler+0x10>)
 80011ba:	f002 fa39 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000d0 	.word	0x200000d0

080011c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <USART1_IRQHandler+0x10>)
 80011ce:	f003 f86f 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000118 	.word	0x20000118

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <USART2_IRQHandler+0x10>)
 80011e2:	f003 f865 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000160 	.word	0x20000160

080011f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <USART3_IRQHandler+0x10>)
 80011f6:	f003 f85b 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001a8 	.word	0x200001a8

08001204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001208:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800120c:	f000 fc60 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f003 fd6e 	bl	8004d24 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20005000 	.word	0x20005000
 8001274:	00000400 	.word	0x00000400
 8001278:	20000248 	.word	0x20000248
 800127c:	20000398 	.word	0x20000398

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fff8 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001292:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a8:	4c09      	ldr	r4, [pc, #36]	@ (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f003 fd3b 	bl	8004d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff f8e3 	bl	8000484 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012c8:	08005700 	.word	0x08005700
  ldr r2, =_sbss
 80012cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012d0:	20000398 	.word	0x20000398

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f947 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fd78 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f95f 	bl	80015e6 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f927 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000004 	.word	0x20000004
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20000008 	.word	0x20000008

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	2000000c 	.word	0x2000000c
 8001384:	2000024c 	.word	0x2000024c

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	2000024c 	.word	0x2000024c

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fff0 	bl	8001388 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffe0 	bl	8001388 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000000c 	.word	0x2000000c

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <__NVIC_EnableIRQ+0x34>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	@ (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	@ (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	@ 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	@ 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff90 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff2d 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff42 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff90 	bl	80014d4 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff35 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d008      	beq.n	8001628 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e020      	b.n	800166a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020e 	bic.w	r2, r2, #14
 8001636:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d005      	beq.n	8001698 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	e051      	b.n	800173c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 020e 	bic.w	r2, r2, #14
 80016a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a22      	ldr	r2, [pc, #136]	@ (8001748 <HAL_DMA_Abort_IT+0xd4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d029      	beq.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a21      	ldr	r2, [pc, #132]	@ (800174c <HAL_DMA_Abort_IT+0xd8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_Abort_IT+0x9e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001750 <HAL_DMA_Abort_IT+0xdc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01a      	beq.n	800170c <HAL_DMA_Abort_IT+0x98>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_DMA_Abort_IT+0xe0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d012      	beq.n	8001706 <HAL_DMA_Abort_IT+0x92>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001758 <HAL_DMA_Abort_IT+0xe4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00a      	beq.n	8001700 <HAL_DMA_Abort_IT+0x8c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_DMA_Abort_IT+0xe8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d102      	bne.n	80016fa <HAL_DMA_Abort_IT+0x86>
 80016f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016f8:	e00e      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 80016fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016fe:	e00b      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 8001700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001704:	e008      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 8001706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170a:	e005      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 800170c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001710:	e002      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 8001712:	2310      	movs	r3, #16
 8001714:	e000      	b.n	8001718 <HAL_DMA_Abort_IT+0xa4>
 8001716:	2301      	movs	r3, #1
 8001718:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <HAL_DMA_Abort_IT+0xec>)
 800171a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
    } 
  }
  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020008 	.word	0x40020008
 800174c:	4002001c 	.word	0x4002001c
 8001750:	40020030 	.word	0x40020030
 8001754:	40020044 	.word	0x40020044
 8001758:	40020058 	.word	0x40020058
 800175c:	4002006c 	.word	0x4002006c
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b08b      	sub	sp, #44	@ 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e169      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001778:	2201      	movs	r2, #1
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8158 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a9a      	ldr	r2, [pc, #616]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d05e      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017a0:	4a98      	ldr	r2, [pc, #608]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d875      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017a6:	4a98      	ldr	r2, [pc, #608]	@ (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d058      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017ac:	4a96      	ldr	r2, [pc, #600]	@ (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d86f      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017b2:	4a96      	ldr	r2, [pc, #600]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d052      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017b8:	4a94      	ldr	r2, [pc, #592]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d869      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017be:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d04c      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017c4:	4a92      	ldr	r2, [pc, #584]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d863      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017ca:	4a92      	ldr	r2, [pc, #584]	@ (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d046      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017d0:	4a90      	ldr	r2, [pc, #576]	@ (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d85d      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d82a      	bhi.n	8001830 <HAL_GPIO_Init+0xcc>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d859      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017de:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <HAL_GPIO_Init+0x80>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	08001839 	.word	0x08001839
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800188d 	.word	0x0800188d
 80017f4:	08001893 	.word	0x08001893
 80017f8:	08001893 	.word	0x08001893
 80017fc:	08001893 	.word	0x08001893
 8001800:	08001893 	.word	0x08001893
 8001804:	08001893 	.word	0x08001893
 8001808:	08001893 	.word	0x08001893
 800180c:	08001893 	.word	0x08001893
 8001810:	08001893 	.word	0x08001893
 8001814:	08001893 	.word	0x08001893
 8001818:	08001893 	.word	0x08001893
 800181c:	08001893 	.word	0x08001893
 8001820:	08001893 	.word	0x08001893
 8001824:	08001893 	.word	0x08001893
 8001828:	08001841 	.word	0x08001841
 800182c:	08001855 	.word	0x08001855
 8001830:	4a79      	ldr	r2, [pc, #484]	@ (8001a18 <HAL_GPIO_Init+0x2b4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e029      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e024      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01f      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e01a      	b.n	8001894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e013      	b.n	8001894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e009      	b.n	8001894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e003      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x130>
          break;
 8001892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	@ 0xff
 8001898:	d801      	bhi.n	800189e <HAL_GPIO_Init+0x13a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_Init+0x13e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	@ 0xff
 80018a8:	d802      	bhi.n	80018b0 <HAL_GPIO_Init+0x14c>
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x152>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	3b08      	subs	r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	210f      	movs	r1, #15
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	6a39      	ldr	r1, [r7, #32]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80b1 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fc:	4a48      	ldr	r2, [pc, #288]	@ (8001a20 <HAL_GPIO_Init+0x2bc>)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a40      	ldr	r2, [pc, #256]	@ (8001a24 <HAL_GPIO_Init+0x2c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a28 <HAL_GPIO_Init+0x2c4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1e8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3e      	ldr	r2, [pc, #248]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1e4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a30 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001940:	2303      	movs	r3, #3
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001944:	2304      	movs	r3, #4
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	492f      	ldr	r1, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x2bc>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	492c      	ldr	r1, [pc, #176]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4928      	ldr	r1, [pc, #160]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001994:	4013      	ands	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4922      	ldr	r1, [pc, #136]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	491e      	ldr	r1, [pc, #120]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4918      	ldr	r1, [pc, #96]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4914      	ldr	r1, [pc, #80]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d021      	beq.n	8001a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	490e      	ldr	r1, [pc, #56]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e021      	b.n	8001a46 <HAL_GPIO_Init+0x2e2>
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4909      	ldr	r1, [pc, #36]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f ae8e 	bne.w	8001778 <HAL_GPIO_Init+0x14>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	372c      	adds	r7, #44	@ 0x2c
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43d9      	mvns	r1, r3
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	400b      	ands	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f806 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e12b      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff f986 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b78:	f001 fbca 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a81      	ldr	r2, [pc, #516]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d807      	bhi.n	8001b98 <HAL_I2C_Init+0x84>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a80      	ldr	r2, [pc, #512]	@ (8001d8c <HAL_I2C_Init+0x278>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e006      	b.n	8001ba6 <HAL_I2C_Init+0x92>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d90 <HAL_I2C_Init+0x27c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bf94      	ite	ls
 8001ba0:	2301      	movls	r3, #1
 8001ba2:	2300      	movhi	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e7      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a78      	ldr	r2, [pc, #480]	@ (8001d94 <HAL_I2C_Init+0x280>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9b      	lsrs	r3, r3, #18
 8001bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d802      	bhi.n	8001be8 <HAL_I2C_Init+0xd4>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3301      	adds	r3, #1
 8001be6:	e009      	b.n	8001bfc <HAL_I2C_Init+0xe8>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <HAL_I2C_Init+0x284>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	495c      	ldr	r1, [pc, #368]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	d819      	bhi.n	8001c50 <HAL_I2C_Init+0x13c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e59      	subs	r1, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c30:	400b      	ands	r3, r1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_I2C_Init+0x138>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e59      	subs	r1, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4a:	e051      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e04f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d111      	bne.n	8001c7c <HAL_I2C_Init+0x168>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e58      	subs	r0, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e012      	b.n	8001ca2 <HAL_I2C_Init+0x18e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x196>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e022      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_I2C_Init+0x1bc>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e58      	subs	r0, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	440b      	add	r3, r1
 8001cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cce:	e00f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6911      	ldr	r1, [r2, #16]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	000186a0 	.word	0x000186a0
 8001d8c:	001e847f 	.word	0x001e847f
 8001d90:	003d08ff 	.word	0x003d08ff
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	461a      	mov	r2, r3
 8001da8:	460b      	mov	r3, r1
 8001daa:	817b      	strh	r3, [r7, #10]
 8001dac:	4613      	mov	r3, r2
 8001dae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff faea 	bl	8001388 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 80e0 	bne.w	8001f84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2319      	movs	r3, #25
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4970      	ldr	r1, [pc, #448]	@ (8001f90 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fc9e 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0d3      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x50>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0cc      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d007      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2221      	movs	r2, #33	@ 0x21
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	893a      	ldrh	r2, [r7, #8]
 8001e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a50      	ldr	r2, [pc, #320]	@ (8001f94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fb08 	bl	8002470 <I2C_MasterRequestWrite>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08d      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e80:	e066      	b.n	8001f50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	6a39      	ldr	r1, [r7, #32]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fd5c 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11b      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0x188>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6a39      	ldr	r1, [r7, #32]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fd53 	bl	80029d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d107      	bne.n	8001f4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e01a      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d194      	bne.n	8001e82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00100002 	.word	0x00100002
 8001f94:	ffff0000 	.word	0xffff0000

08001f98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff f9ea 	bl	8001388 <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	f040 824b 	bne.w	800245a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	2201      	movs	r2, #1
 8001fcc:	497f      	ldr	r1, [pc, #508]	@ (80021cc <HAL_I2C_Master_Receive+0x234>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fb9e 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e23e      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2C_Master_Receive+0x54>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e237      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2222      	movs	r2, #34	@ 0x22
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2210      	movs	r2, #16
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a5f      	ldr	r2, [pc, #380]	@ (80021d0 <HAL_I2C_Master_Receive+0x238>)
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fa8a 	bl	8002574 <I2C_MasterRequestRead>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1f8      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d113      	bne.n	800209a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e1cc      	b.n	8002434 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d11e      	bne.n	80020e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b2:	b672      	cpsid	i
}
 80020b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020dc:	b662      	cpsie	i
}
 80020de:	e035      	b.n	800214c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11e      	bne.n	8002126 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002122:	b662      	cpsie	i
}
 8002124:	e012      	b.n	800214c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800214c:	e172      	b.n	8002434 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002152:	2b03      	cmp	r3, #3
 8002154:	f200 811f 	bhi.w	8002396 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215c:	2b01      	cmp	r3, #1
 800215e:	d123      	bne.n	80021a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002162:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fc7d 	bl	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e173      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021a6:	e145      	b.n	8002434 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d152      	bne.n	8002256 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	2200      	movs	r2, #0
 80021b8:	4906      	ldr	r1, [pc, #24]	@ (80021d4 <HAL_I2C_Master_Receive+0x23c>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 faa8 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e148      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
 80021ca:	bf00      	nop
 80021cc:	00100002 	.word	0x00100002
 80021d0:	ffff0000 	.word	0xffff0000
 80021d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800221e:	b662      	cpsie	i
}
 8002220:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002254:	e0ee      	b.n	8002434 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	2200      	movs	r2, #0
 800225e:	4981      	ldr	r1, [pc, #516]	@ (8002464 <HAL_I2C_Master_Receive+0x4cc>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa55 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0f5      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002280:	b672      	cpsid	i
}
 8002282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_I2C_Master_Receive+0x4d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	4a6b      	ldr	r2, [pc, #428]	@ (800246c <HAL_I2C_Master_Receive+0x4d4>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a1a      	lsrs	r2, r3, #8
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d118      	bne.n	800230e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022fe:	b662      	cpsie	i
}
 8002300:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0a6      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d1d9      	bne.n	80022d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800235e:	b662      	cpsie	i
}
 8002360:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002394:	e04e      	b.n	8002434 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fb62 	bl	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e058      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d124      	bne.n	8002434 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002400:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f ae88 	bne.w	800214e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00010004 	.word	0x00010004
 8002468:	20000004 	.word	0x20000004
 800246c:	14f8b589 	.word	0x14f8b589

08002470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	460b      	mov	r3, r1
 800247e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d006      	beq.n	800249a <I2C_MasterRequestWrite+0x2a>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <I2C_MasterRequestWrite+0x2a>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002498:	d108      	bne.n	80024ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00b      	b.n	80024c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d107      	bne.n	80024c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f91d 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ea:	d103      	bne.n	80024f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e035      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002500:	d108      	bne.n	8002514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	e01b      	b.n	800254c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002514:	897b      	ldrh	r3, [r7, #10]
 8002516:	11db      	asrs	r3, r3, #7
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0306 	and.w	r3, r3, #6
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 030f 	orn	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <I2C_MasterRequestWrite+0xfc>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f966 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e010      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4907      	ldr	r1, [pc, #28]	@ (8002570 <I2C_MasterRequestWrite+0x100>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f956 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00010008 	.word	0x00010008
 8002570:	00010002 	.word	0x00010002

08002574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d006      	beq.n	80025ae <I2C_MasterRequestRead+0x3a>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d003      	beq.n	80025ae <I2C_MasterRequestRead+0x3a>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025ac:	d108      	bne.n	80025c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e00b      	b.n	80025d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d107      	bne.n	80025d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f893 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fe:	d103      	bne.n	8002608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e079      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002614:	d108      	bne.n	8002628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e05f      	b.n	80026e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002628:	897b      	ldrh	r3, [r7, #10]
 800262a:	11db      	asrs	r3, r3, #7
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f003 0306 	and.w	r3, r3, #6
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f063 030f 	orn	r3, r3, #15
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4930      	ldr	r1, [pc, #192]	@ (8002708 <I2C_MasterRequestRead+0x194>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f8dc 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e054      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4929      	ldr	r1, [pc, #164]	@ (800270c <I2C_MasterRequestRead+0x198>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f8cc 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e044      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800269a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f831 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c2:	d103      	bne.n	80026cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e017      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	11db      	asrs	r3, r3, #7
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f063 030e 	orn	r3, r3, #14
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4907      	ldr	r1, [pc, #28]	@ (800270c <I2C_MasterRequestRead+0x198>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f888 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	00010008 	.word	0x00010008
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002720:	e048      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d044      	beq.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7fe fe2d 	bl	8001388 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d139      	bne.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10d      	bne.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	43da      	mvns	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4013      	ands	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	e00c      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	429a      	cmp	r2, r3
 8002784:	d116      	bne.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e023      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d10d      	bne.n	80027da <I2C_WaitOnFlagUntilTimeout+0xca>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	43da      	mvns	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	e00c      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	43da      	mvns	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4013      	ands	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d093      	beq.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002812:	e071      	b.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002822:	d123      	bne.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800283c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e067      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d041      	beq.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002874:	f7fe fd88 	bl	8001388 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d136      	bne.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e00b      	b.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e021      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10c      	bne.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	43da      	mvns	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e00b      	b.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f af6d 	bne.w	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002950:	e034      	b.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8e3 	bl	8002b1e <I2C_IsAcknowledgeFailed>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e034      	b.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d028      	beq.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe fd0d 	bl	8001388 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11d      	bne.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b80      	cmp	r3, #128	@ 0x80
 800298c:	d016      	beq.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b80      	cmp	r3, #128	@ 0x80
 80029c8:	d1c3      	bne.n	8002952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e0:	e034      	b.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f89b 	bl	8002b1e <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e034      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d028      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe fcc5 	bl	8001388 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11d      	bne.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d016      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1c3      	bne.n	80029e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a70:	e049      	b.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d119      	bne.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0210 	mvn.w	r2, #16
 8002a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e030      	b.n	8002b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab4:	f7fe fc68 	bl	8001388 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d302      	bcc.n	8002aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11d      	bne.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad4:	2b40      	cmp	r3, #64	@ 0x40
 8002ad6:	d016      	beq.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e007      	b.n	8002b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b10:	2b40      	cmp	r3, #64	@ 0x40
 8002b12:	d1ae      	bne.n	8002a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b34:	d11b      	bne.n	8002b6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e272      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8087 	beq.w	8002caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9c:	4b92      	ldr	r3, [pc, #584]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d112      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b89      	ldr	r3, [pc, #548]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x12c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d168      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e24c      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x76>
 8002be4:	4b80      	ldr	r3, [pc, #512]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7f      	ldr	r2, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x98>
 8002bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b78      	ldr	r3, [pc, #480]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a77      	ldr	r2, [pc, #476]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0xbc>
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a71      	ldr	r2, [pc, #452]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002c38:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a67      	ldr	r2, [pc, #412]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fb96 	bl	8001388 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fb92 	bl	8001388 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e200      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe4>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fb82 	bl	8001388 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fb7e 	bl	8001388 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ec      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x10c>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cc2:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x18c>
 8002cce:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x176>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1c0      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4939      	ldr	r1, [pc, #228]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fb37 	bl	8001388 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fb33 	bl	8001388 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1a1      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe fb16 	bl	8001388 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d60:	f7fe fb12 	bl	8001388 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e180      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03a      	beq.n	8002e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe faf6 	bl	8001388 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe faf2 	bl	8001388 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e160      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 face 	bl	8003360 <RCC_Delay>
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fadc 	bl	8001388 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fad8 	bl	8001388 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d908      	bls.n	8002df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e146      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	42420000 	.word	0x42420000
 8002df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b92      	ldr	r3, [pc, #584]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e9      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a6 	beq.w	8002f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b8b      	ldr	r3, [pc, #556]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4a87      	ldr	r2, [pc, #540]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	61d3      	str	r3, [r2, #28]
 8002e2a:	4b85      	ldr	r3, [pc, #532]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b82      	ldr	r3, [pc, #520]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fa99 	bl	8001388 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe fa95 	bl	8001388 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	@ 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e103      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b75      	ldr	r3, [pc, #468]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x312>
 8002e80:	4b6f      	ldr	r3, [pc, #444]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x334>
 8002e96:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a69      	ldr	r2, [pc, #420]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4b67      	ldr	r3, [pc, #412]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a66      	ldr	r2, [pc, #408]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x356>
 8002eb8:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a60      	ldr	r2, [pc, #384]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa49 	bl	8001388 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fa45 	bl	8001388 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0b1      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b4b      	ldr	r3, [pc, #300]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x37e>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fa33 	bl	8001388 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe fa2f 	bl	8001388 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e09b      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b40      	ldr	r3, [pc, #256]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4a3b      	ldr	r2, [pc, #236]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8087 	beq.w	8003072 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d061      	beq.n	8003034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d146      	bne.n	8003006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b33      	ldr	r3, [pc, #204]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fa03 	bl	8001388 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe f9ff 	bl	8001388 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e06d      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4921      	ldr	r1, [pc, #132]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a19      	ldr	r1, [r3, #32]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	491b      	ldr	r1, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe f9d3 	bl	8001388 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe f9cf 	bl	8001388 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46a>
 8003004:	e035      	b.n	8003072 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe f9bc 	bl	8001388 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe f9b8 	bl	8001388 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e026      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x498>
 8003032:	e01e      	b.n	8003072 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e019      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
 8003040:	40021000 	.word	0x40021000
 8003044:	40007000 	.word	0x40007000
 8003048:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_OscConfig+0x500>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d0      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b67      	ldr	r3, [pc, #412]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4965      	ldr	r1, [pc, #404]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d040      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d115      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e073      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3d      	ldr	r3, [pc, #244]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4936      	ldr	r1, [pc, #216]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003170:	f7fe f90a 	bl	8001388 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe f906 	bl	8001388 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e053      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d210      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4922      	ldr	r1, [pc, #136]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f821 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	@ (8003248 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1cc>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f868 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	08005698 	.word	0x08005698
 800324c:	20000004 	.word	0x20000004
 8003250:	20000008 	.word	0x20000008

08003254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326e:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b04      	cmp	r3, #4
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x30>
 800327e:	2b08      	cmp	r3, #8
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x36>
 8003282:	e027      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003286:	613b      	str	r3, [r7, #16]
      break;
 8003288:	e027      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	0c5b      	lsrs	r3, r3, #17
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e004      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	613b      	str	r3, [r7, #16]
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	613b      	str	r3, [r7, #16]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	693b      	ldr	r3, [r7, #16]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	080056b0 	.word	0x080056b0
 80032f4:	080056c0 	.word	0x080056c0
 80032f8:	003d0900 	.word	0x003d0900

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b02      	ldr	r3, [pc, #8]	@ (800330c <HAL_RCC_GetHCLKFreq+0x10>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003314:	f7ff fff2 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	080056a8 	.word	0x080056a8

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800333c:	f7ff ffde 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0adb      	lsrs	r3, r3, #11
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	080056a8 	.word	0x080056a8

08003360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003368:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <RCC_Delay+0x34>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <RCC_Delay+0x38>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0a5b      	lsrs	r3, r3, #9
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800337c:	bf00      	nop
  }
  while (Delay --);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <RCC_Delay+0x1c>
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20000004 	.word	0x20000004
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e041      	b.n	8003432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fd92 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f000 fbde 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e041      	b.n	80034d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f839 	bl	80034d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f000 fb8f 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x24>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e022      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_TIM_PWM_Start+0x3e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e015      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x58>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e008      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e05e      	b.n	800361c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0x82>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356c:	e013      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0x92>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	e00b      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800358c:	e003      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fd7c 	bl	800409c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d107      	bne.n	80035be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <HAL_TIM_PWM_Start+0x13c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_TIM_PWM_Start+0x140>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d010      	beq.n	800361a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	e007      	b.n	800361a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0202 	mvn.w	r2, #2
 800365c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa76 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa69 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa78 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa4c 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa3f 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa4e 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0208 	mvn.w	r2, #8
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa22 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa15 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa24 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0210 	mvn.w	r2, #16
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2208      	movs	r2, #8
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9f8 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9eb 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9fa 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0201 	mvn.w	r2, #1
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fb00 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037cc:	2b80      	cmp	r3, #128	@ 0x80
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fce9 	bl	80041b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	2b40      	cmp	r3, #64	@ 0x40
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9be 	bl	8003b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0220 	mvn.w	r2, #32
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fcb4 	bl	80041a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800385a:	2302      	movs	r3, #2
 800385c:	e0ae      	b.n	80039bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0c      	cmp	r3, #12
 800386a:	f200 809f 	bhi.w	80039ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800386e:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080039ad 	.word	0x080039ad
 800387c:	080039ad 	.word	0x080039ad
 8003880:	080039ad 	.word	0x080039ad
 8003884:	080038e9 	.word	0x080038e9
 8003888:	080039ad 	.word	0x080039ad
 800388c:	080039ad 	.word	0x080039ad
 8003890:	080039ad 	.word	0x080039ad
 8003894:	0800392b 	.word	0x0800392b
 8003898:	080039ad 	.word	0x080039ad
 800389c:	080039ad 	.word	0x080039ad
 80038a0:	080039ad 	.word	0x080039ad
 80038a4:	0800396b 	.word	0x0800396b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f9d6 	bl	8003c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
      break;
 80038e6:	e064      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa1c 	bl	8003d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
      break;
 8003928:	e043      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa65 	bl	8003e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0208 	orr.w	r2, r2, #8
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0204 	bic.w	r2, r2, #4
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      break;
 8003968:	e023      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 faaf 	bl	8003ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	61da      	str	r2, [r3, #28]
      break;
 80039aa:	e002      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0b4      	b.n	8003b4a <HAL_TIM_ConfigClockSource+0x186>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a18:	d03e      	beq.n	8003a98 <HAL_TIM_ConfigClockSource+0xd4>
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1e:	f200 8087 	bhi.w	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a26:	f000 8086 	beq.w	8003b36 <HAL_TIM_ConfigClockSource+0x172>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2e:	d87f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b70      	cmp	r3, #112	@ 0x70
 8003a32:	d01a      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0xa6>
 8003a34:	2b70      	cmp	r3, #112	@ 0x70
 8003a36:	d87b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b60      	cmp	r3, #96	@ 0x60
 8003a3a:	d050      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x11a>
 8003a3c:	2b60      	cmp	r3, #96	@ 0x60
 8003a3e:	d877      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b50      	cmp	r3, #80	@ 0x50
 8003a42:	d03c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xfa>
 8003a44:	2b50      	cmp	r3, #80	@ 0x50
 8003a46:	d873      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	d058      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x13a>
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d86f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b30      	cmp	r3, #48	@ 0x30
 8003a52:	d064      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	2b30      	cmp	r3, #48	@ 0x30
 8003a56:	d86b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d060      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d867      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d05c      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d05a      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	e062      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a7a:	f000 faf0 	bl	800405e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	609a      	str	r2, [r3, #8]
      break;
 8003a96:	e04f      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	f000 fad9 	bl	800405e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aba:	609a      	str	r2, [r3, #8]
      break;
 8003abc:	e03c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fa50 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2150      	movs	r1, #80	@ 0x50
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 faa7 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003adc:	e02c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fa6e 	bl	8003fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2160      	movs	r1, #96	@ 0x60
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fa97 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003afc:	e01c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 fa30 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2140      	movs	r1, #64	@ 0x40
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa87 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f000 fa7e 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
	...

08003b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a29      	ldr	r2, [pc, #164]	@ (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a26      	ldr	r2, [pc, #152]	@ (8003c58 <TIM_Base_SetConfig+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a25      	ldr	r2, [pc, #148]	@ (8003c5c <TIM_Base_SetConfig+0xc0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <TIM_Base_SetConfig+0xbc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <TIM_Base_SetConfig+0xc0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a07      	ldr	r2, [pc, #28]	@ (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800

08003c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 0201 	bic.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 0302 	bic.w	r3, r3, #2
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d28 <TIM_OC1_SetConfig+0xc8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10c      	bne.n	8003cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0308 	bic.w	r3, r3, #8
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a13      	ldr	r2, [pc, #76]	@ (8003d28 <TIM_OC1_SetConfig+0xc8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00

08003d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 0210 	bic.w	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0320 	bic.w	r3, r3, #32
 8003d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1d      	ldr	r2, [pc, #116]	@ (8003dfc <TIM_OC2_SetConfig+0xd0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10d      	bne.n	8003da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <TIM_OC2_SetConfig+0xd0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d113      	bne.n	8003dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00

08003e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed0 <TIM_OC3_SetConfig+0xd0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10d      	bne.n	8003e7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ed0 <TIM_OC3_SetConfig+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d113      	bne.n	8003eaa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f6c <TIM_OC4_SetConfig+0x98>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 030a 	bic.w	r3, r3, #10
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0210 	bic.w	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	031b      	lsls	r3, r3, #12
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	f043 0307 	orr.w	r3, r3, #7
 800404c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405e:	b480      	push	{r7}
 8004060:	b087      	sub	sp, #28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	021a      	lsls	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	431a      	orrs	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	609a      	str	r2, [r3, #8]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2201      	movs	r2, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e046      	b.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004148:	d009      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a10      	ldr	r2, [pc, #64]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10c      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800

080041a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fed6 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fcd5 	bl	8004bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	d112      	bne.n	80042a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Receive_IT+0x26>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e00b      	b.n	80042a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	461a      	mov	r2, r3
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fab7 	bl	800480e <UART_Start_Receive_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	e000      	b.n	80042a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b0ba      	sub	sp, #232	@ 0xe8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_UART_IRQHandler+0x66>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fb93 	bl	8004a3a <UART_Receive_IT>
      return;
 8004314:	e25b      	b.n	80047ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80de 	beq.w	80044dc <HAL_UART_IRQHandler+0x22c>
 8004320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80d1 	beq.w	80044dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_UART_IRQHandler+0xae>
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xd2>
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f043 0202 	orr.w	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_UART_IRQHandler+0xf6>
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f043 0204 	orr.w	r2, r3, #4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d011      	beq.n	80043d6 <HAL_UART_IRQHandler+0x126>
 80043b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 81f2 	beq.w	80047c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_UART_IRQHandler+0x14e>
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb1e 	bl	8004a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <HAL_UART_IRQHandler+0x17a>
 8004422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04f      	beq.n	80044ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fa28 	bl	8004880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d041      	beq.n	80044c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3314      	adds	r3, #20
 8004444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800446a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800446e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1d9      	bne.n	800443e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004496:	4a7e      	ldr	r2, [pc, #504]	@ (8004690 <HAL_UART_IRQHandler+0x3e0>)
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd f8e8 	bl	8001674 <HAL_DMA_Abort_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	e00e      	b.n	80044d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f993 	bl	80047e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	e00a      	b.n	80044d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f98f 	bl	80047e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	e006      	b.n	80044d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f98b 	bl	80047e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044d6:	e175      	b.n	80047c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	bf00      	nop
    return;
 80044da:	e173      	b.n	80047c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 814f 	bne.w	8004784 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8148 	beq.w	8004784 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8141 	beq.w	8004784 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80b6 	beq.w	8004694 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8145 	beq.w	80047c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004546:	429a      	cmp	r2, r3
 8004548:	f080 813e 	bcs.w	80047c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004552:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b20      	cmp	r3, #32
 800455c:	f000 8088 	beq.w	8004670 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004576:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800457a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800457e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800458c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004598:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1d9      	bne.n	8004560 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e1      	bne.n	80045ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3314      	adds	r3, #20
 8004608:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800460c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800460e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004612:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800461a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e3      	bne.n	80045e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800463e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004640:	f023 0310 	bic.w	r3, r3, #16
 8004644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004652:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004654:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e3      	bne.n	800462e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466a:	4618      	mov	r0, r3
 800466c:	f7fc ffc7 	bl	80015fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800467e:	b29b      	uxth	r3, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	b29b      	uxth	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8b6 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800468c:	e09c      	b.n	80047c8 <HAL_UART_IRQHandler+0x518>
 800468e:	bf00      	nop
 8004690:	08004945 	.word	0x08004945
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800469c:	b29b      	uxth	r3, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 808e 	beq.w	80047cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8089 	beq.w	80047cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046de:	647a      	str	r2, [r7, #68]	@ 0x44
 80046e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e3      	bne.n	80046ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	623b      	str	r3, [r7, #32]
   return(result);
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004716:	633a      	str	r2, [r7, #48]	@ 0x30
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800471c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	60fb      	str	r3, [r7, #12]
   return(result);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0310 	bic.w	r3, r3, #16
 800474e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800475c:	61fa      	str	r2, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	617b      	str	r3, [r7, #20]
   return(result);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e3      	bne.n	8004738 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004776:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f83b 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004782:	e023      	b.n	80047cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <HAL_UART_IRQHandler+0x4f4>
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8e5 	bl	800496c <UART_Transmit_IT>
    return;
 80047a2:	e014      	b.n	80047ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <HAL_UART_IRQHandler+0x51e>
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f924 	bl	8004a0a <UART_EndTransmit_IT>
    return;
 80047c2:	e004      	b.n	80047ce <HAL_UART_IRQHandler+0x51e>
    return;
 80047c4:	bf00      	nop
 80047c6:	e002      	b.n	80047ce <HAL_UART_IRQHandler+0x51e>
      return;
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_UART_IRQHandler+0x51e>
      return;
 80047cc:	bf00      	nop
  }
}
 80047ce:	37e8      	adds	r7, #232	@ 0xe8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2222      	movs	r2, #34	@ 0x22
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004852:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b095      	sub	sp, #84	@ 0x54
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800489e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3314      	adds	r3, #20
 80048da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d119      	bne.n	800492c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	60bb      	str	r3, [r7, #8]
   return(result);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0310 	bic.w	r3, r3, #16
 800490e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004918:	61ba      	str	r2, [r7, #24]
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	613b      	str	r3, [r7, #16]
   return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800493a:	bf00      	nop
 800493c:	3754      	adds	r7, #84	@ 0x54
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ff41 	bl	80047e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b21      	cmp	r3, #33	@ 0x21
 800497e:	d13e      	bne.n	80049fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004988:	d114      	bne.n	80049b4 <UART_Transmit_IT+0x48>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]
 80049b2:	e008      	b.n	80049c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6211      	str	r1, [r2, #32]
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4619      	mov	r1, r3
 80049d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fed2 	bl	80047d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b08c      	sub	sp, #48	@ 0x30
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b22      	cmp	r3, #34	@ 0x22
 8004a4c:	f040 80ae 	bne.w	8004bac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a58:	d117      	bne.n	8004a8a <UART_Receive_IT+0x50>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d113      	bne.n	8004a8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	1c9a      	adds	r2, r3, #2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a88:	e026      	b.n	8004ad8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9c:	d007      	beq.n	8004aae <UART_Receive_IT+0x74>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <UART_Receive_IT+0x82>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e008      	b.n	8004ace <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004acc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d15d      	bne.n	8004ba8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0220 	bic.w	r2, r2, #32
 8004afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d135      	bne.n	8004b9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	613b      	str	r3, [r7, #16]
   return(result);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	623a      	str	r2, [r7, #32]
 8004b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d10a      	bne.n	8004b90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe2e 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
 8004b9c:	e002      	b.n	8004ba4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fb fea4 	bl	80008ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e002      	b.n	8004bae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3730      	adds	r7, #48	@ 0x30
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004bf2:	f023 030c 	bic.w	r3, r3, #12
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ccc <UART_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d103      	bne.n	8004c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fb8a 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	e002      	b.n	8004c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe fb72 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	4a22      	ldr	r2, [pc, #136]	@ (8004cd0 <UART_SetConfig+0x118>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	0119      	lsls	r1, r3, #4
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c64:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <UART_SetConfig+0x118>)
 8004c66:	fba3 0302 	umull	r0, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2064      	movs	r0, #100	@ 0x64
 8004c6e:	fb00 f303 	mul.w	r3, r0, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	@ 0x32
 8004c78:	4a15      	ldr	r2, [pc, #84]	@ (8004cd0 <UART_SetConfig+0x118>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c84:	4419      	add	r1, r3
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd0 <UART_SetConfig+0x118>)
 8004c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2064      	movs	r0, #100	@ 0x64
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	@ 0x32
 8004cb0:	4a07      	ldr	r2, [pc, #28]	@ (8004cd0 <UART_SetConfig+0x118>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	51eb851f 	.word	0x51eb851f

08004cd4 <siprintf>:
 8004cd4:	b40e      	push	{r1, r2, r3}
 8004cd6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cda:	b500      	push	{lr}
 8004cdc:	b09c      	sub	sp, #112	@ 0x70
 8004cde:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ce0:	9002      	str	r0, [sp, #8]
 8004ce2:	9006      	str	r0, [sp, #24]
 8004ce4:	9107      	str	r1, [sp, #28]
 8004ce6:	9104      	str	r1, [sp, #16]
 8004ce8:	4808      	ldr	r0, [pc, #32]	@ (8004d0c <siprintf+0x38>)
 8004cea:	4909      	ldr	r1, [pc, #36]	@ (8004d10 <siprintf+0x3c>)
 8004cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cf0:	9105      	str	r1, [sp, #20]
 8004cf2:	6800      	ldr	r0, [r0, #0]
 8004cf4:	a902      	add	r1, sp, #8
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	f000 f992 	bl	8005020 <_svfiprintf_r>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	9b02      	ldr	r3, [sp, #8]
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	b01c      	add	sp, #112	@ 0x70
 8004d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d08:	b003      	add	sp, #12
 8004d0a:	4770      	bx	lr
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	ffff0208 	.word	0xffff0208

08004d14 <memset>:
 8004d14:	4603      	mov	r3, r0
 8004d16:	4402      	add	r2, r0
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d100      	bne.n	8004d1e <memset+0xa>
 8004d1c:	4770      	bx	lr
 8004d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d22:	e7f9      	b.n	8004d18 <memset+0x4>

08004d24 <__errno>:
 8004d24:	4b01      	ldr	r3, [pc, #4]	@ (8004d2c <__errno+0x8>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20000010 	.word	0x20000010

08004d30 <__libc_init_array>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	2600      	movs	r6, #0
 8004d34:	4d0c      	ldr	r5, [pc, #48]	@ (8004d68 <__libc_init_array+0x38>)
 8004d36:	4c0d      	ldr	r4, [pc, #52]	@ (8004d6c <__libc_init_array+0x3c>)
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	42a6      	cmp	r6, r4
 8004d3e:	d109      	bne.n	8004d54 <__libc_init_array+0x24>
 8004d40:	f000 fc78 	bl	8005634 <_init>
 8004d44:	2600      	movs	r6, #0
 8004d46:	4d0a      	ldr	r5, [pc, #40]	@ (8004d70 <__libc_init_array+0x40>)
 8004d48:	4c0a      	ldr	r4, [pc, #40]	@ (8004d74 <__libc_init_array+0x44>)
 8004d4a:	1b64      	subs	r4, r4, r5
 8004d4c:	10a4      	asrs	r4, r4, #2
 8004d4e:	42a6      	cmp	r6, r4
 8004d50:	d105      	bne.n	8004d5e <__libc_init_array+0x2e>
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d58:	4798      	blx	r3
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7ee      	b.n	8004d3c <__libc_init_array+0xc>
 8004d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d62:	4798      	blx	r3
 8004d64:	3601      	adds	r6, #1
 8004d66:	e7f2      	b.n	8004d4e <__libc_init_array+0x1e>
 8004d68:	080056f8 	.word	0x080056f8
 8004d6c:	080056f8 	.word	0x080056f8
 8004d70:	080056f8 	.word	0x080056f8
 8004d74:	080056fc 	.word	0x080056fc

08004d78 <__retarget_lock_acquire_recursive>:
 8004d78:	4770      	bx	lr

08004d7a <__retarget_lock_release_recursive>:
 8004d7a:	4770      	bx	lr

08004d7c <_free_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4605      	mov	r5, r0
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d040      	beq.n	8004e06 <_free_r+0x8a>
 8004d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d88:	1f0c      	subs	r4, r1, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfb8      	it	lt
 8004d8e:	18e4      	addlt	r4, r4, r3
 8004d90:	f000 f8de 	bl	8004f50 <__malloc_lock>
 8004d94:	4a1c      	ldr	r2, [pc, #112]	@ (8004e08 <_free_r+0x8c>)
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	b933      	cbnz	r3, 8004da8 <_free_r+0x2c>
 8004d9a:	6063      	str	r3, [r4, #4]
 8004d9c:	6014      	str	r4, [r2, #0]
 8004d9e:	4628      	mov	r0, r5
 8004da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da4:	f000 b8da 	b.w	8004f5c <__malloc_unlock>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d908      	bls.n	8004dbe <_free_r+0x42>
 8004dac:	6820      	ldr	r0, [r4, #0]
 8004dae:	1821      	adds	r1, r4, r0
 8004db0:	428b      	cmp	r3, r1
 8004db2:	bf01      	itttt	eq
 8004db4:	6819      	ldreq	r1, [r3, #0]
 8004db6:	685b      	ldreq	r3, [r3, #4]
 8004db8:	1809      	addeq	r1, r1, r0
 8004dba:	6021      	streq	r1, [r4, #0]
 8004dbc:	e7ed      	b.n	8004d9a <_free_r+0x1e>
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b10b      	cbz	r3, 8004dc8 <_free_r+0x4c>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d9fa      	bls.n	8004dbe <_free_r+0x42>
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	1850      	adds	r0, r2, r1
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d10b      	bne.n	8004de8 <_free_r+0x6c>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	1850      	adds	r0, r2, r1
 8004dd6:	4283      	cmp	r3, r0
 8004dd8:	6011      	str	r1, [r2, #0]
 8004dda:	d1e0      	bne.n	8004d9e <_free_r+0x22>
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4408      	add	r0, r1
 8004de2:	6010      	str	r0, [r2, #0]
 8004de4:	6053      	str	r3, [r2, #4]
 8004de6:	e7da      	b.n	8004d9e <_free_r+0x22>
 8004de8:	d902      	bls.n	8004df0 <_free_r+0x74>
 8004dea:	230c      	movs	r3, #12
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	e7d6      	b.n	8004d9e <_free_r+0x22>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	1821      	adds	r1, r4, r0
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf01      	itttt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	1809      	addeq	r1, r1, r0
 8004dfe:	6021      	streq	r1, [r4, #0]
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	6054      	str	r4, [r2, #4]
 8004e04:	e7cb      	b.n	8004d9e <_free_r+0x22>
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	20000394 	.word	0x20000394

08004e0c <sbrk_aligned>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e4c <sbrk_aligned+0x40>)
 8004e10:	460c      	mov	r4, r1
 8004e12:	6831      	ldr	r1, [r6, #0]
 8004e14:	4605      	mov	r5, r0
 8004e16:	b911      	cbnz	r1, 8004e1e <sbrk_aligned+0x12>
 8004e18:	f000 fbaa 	bl	8005570 <_sbrk_r>
 8004e1c:	6030      	str	r0, [r6, #0]
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 fba5 	bl	8005570 <_sbrk_r>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d103      	bne.n	8004e32 <sbrk_aligned+0x26>
 8004e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e2e:	4620      	mov	r0, r4
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
 8004e32:	1cc4      	adds	r4, r0, #3
 8004e34:	f024 0403 	bic.w	r4, r4, #3
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d0f8      	beq.n	8004e2e <sbrk_aligned+0x22>
 8004e3c:	1a21      	subs	r1, r4, r0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fb96 	bl	8005570 <_sbrk_r>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d1f2      	bne.n	8004e2e <sbrk_aligned+0x22>
 8004e48:	e7ef      	b.n	8004e2a <sbrk_aligned+0x1e>
 8004e4a:	bf00      	nop
 8004e4c:	20000390 	.word	0x20000390

08004e50 <_malloc_r>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	1ccd      	adds	r5, r1, #3
 8004e56:	f025 0503 	bic.w	r5, r5, #3
 8004e5a:	3508      	adds	r5, #8
 8004e5c:	2d0c      	cmp	r5, #12
 8004e5e:	bf38      	it	cc
 8004e60:	250c      	movcc	r5, #12
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	4606      	mov	r6, r0
 8004e66:	db01      	blt.n	8004e6c <_malloc_r+0x1c>
 8004e68:	42a9      	cmp	r1, r5
 8004e6a:	d904      	bls.n	8004e76 <_malloc_r+0x26>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	6033      	str	r3, [r6, #0]
 8004e70:	2000      	movs	r0, #0
 8004e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f4c <_malloc_r+0xfc>
 8004e7a:	f000 f869 	bl	8004f50 <__malloc_lock>
 8004e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e82:	461c      	mov	r4, r3
 8004e84:	bb44      	cbnz	r4, 8004ed8 <_malloc_r+0x88>
 8004e86:	4629      	mov	r1, r5
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7ff ffbf 	bl	8004e0c <sbrk_aligned>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	4604      	mov	r4, r0
 8004e92:	d158      	bne.n	8004f46 <_malloc_r+0xf6>
 8004e94:	f8d8 4000 	ldr.w	r4, [r8]
 8004e98:	4627      	mov	r7, r4
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	d143      	bne.n	8004f26 <_malloc_r+0xd6>
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d04b      	beq.n	8004f3a <_malloc_r+0xea>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	eb04 0903 	add.w	r9, r4, r3
 8004eac:	f000 fb60 	bl	8005570 <_sbrk_r>
 8004eb0:	4581      	cmp	r9, r0
 8004eb2:	d142      	bne.n	8004f3a <_malloc_r+0xea>
 8004eb4:	6821      	ldr	r1, [r4, #0]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	1a6d      	subs	r5, r5, r1
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7ff ffa6 	bl	8004e0c <sbrk_aligned>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d03a      	beq.n	8004f3a <_malloc_r+0xea>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	442b      	add	r3, r5
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	f8d8 3000 	ldr.w	r3, [r8]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	bb62      	cbnz	r2, 8004f2c <_malloc_r+0xdc>
 8004ed2:	f8c8 7000 	str.w	r7, [r8]
 8004ed6:	e00f      	b.n	8004ef8 <_malloc_r+0xa8>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	1b52      	subs	r2, r2, r5
 8004edc:	d420      	bmi.n	8004f20 <_malloc_r+0xd0>
 8004ede:	2a0b      	cmp	r2, #11
 8004ee0:	d917      	bls.n	8004f12 <_malloc_r+0xc2>
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	6025      	str	r5, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	6059      	strne	r1, [r3, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	bf08      	it	eq
 8004ef0:	f8c8 1000 	streq.w	r1, [r8]
 8004ef4:	5162      	str	r2, [r4, r5]
 8004ef6:	604b      	str	r3, [r1, #4]
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f000 f82f 	bl	8004f5c <__malloc_unlock>
 8004efe:	f104 000b 	add.w	r0, r4, #11
 8004f02:	1d23      	adds	r3, r4, #4
 8004f04:	f020 0007 	bic.w	r0, r0, #7
 8004f08:	1ac2      	subs	r2, r0, r3
 8004f0a:	bf1c      	itt	ne
 8004f0c:	1a1b      	subne	r3, r3, r0
 8004f0e:	50a3      	strne	r3, [r4, r2]
 8004f10:	e7af      	b.n	8004e72 <_malloc_r+0x22>
 8004f12:	6862      	ldr	r2, [r4, #4]
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	bf0c      	ite	eq
 8004f18:	f8c8 2000 	streq.w	r2, [r8]
 8004f1c:	605a      	strne	r2, [r3, #4]
 8004f1e:	e7eb      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f20:	4623      	mov	r3, r4
 8004f22:	6864      	ldr	r4, [r4, #4]
 8004f24:	e7ae      	b.n	8004e84 <_malloc_r+0x34>
 8004f26:	463c      	mov	r4, r7
 8004f28:	687f      	ldr	r7, [r7, #4]
 8004f2a:	e7b6      	b.n	8004e9a <_malloc_r+0x4a>
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d1fb      	bne.n	8004f2c <_malloc_r+0xdc>
 8004f34:	2300      	movs	r3, #0
 8004f36:	6053      	str	r3, [r2, #4]
 8004f38:	e7de      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	f000 f80c 	bl	8004f5c <__malloc_unlock>
 8004f44:	e794      	b.n	8004e70 <_malloc_r+0x20>
 8004f46:	6005      	str	r5, [r0, #0]
 8004f48:	e7d6      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f4a:	bf00      	nop
 8004f4c:	20000394 	.word	0x20000394

08004f50 <__malloc_lock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__malloc_lock+0x8>)
 8004f52:	f7ff bf11 	b.w	8004d78 <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	2000038c 	.word	0x2000038c

08004f5c <__malloc_unlock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__malloc_unlock+0x8>)
 8004f5e:	f7ff bf0c 	b.w	8004d7a <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	2000038c 	.word	0x2000038c

08004f68 <__ssputs_r>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	461f      	mov	r7, r3
 8004f6e:	688e      	ldr	r6, [r1, #8]
 8004f70:	4682      	mov	sl, r0
 8004f72:	42be      	cmp	r6, r7
 8004f74:	460c      	mov	r4, r1
 8004f76:	4690      	mov	r8, r2
 8004f78:	680b      	ldr	r3, [r1, #0]
 8004f7a:	d82d      	bhi.n	8004fd8 <__ssputs_r+0x70>
 8004f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f84:	d026      	beq.n	8004fd4 <__ssputs_r+0x6c>
 8004f86:	6965      	ldr	r5, [r4, #20]
 8004f88:	6909      	ldr	r1, [r1, #16]
 8004f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8e:	eba3 0901 	sub.w	r9, r3, r1
 8004f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f96:	1c7b      	adds	r3, r7, #1
 8004f98:	444b      	add	r3, r9
 8004f9a:	106d      	asrs	r5, r5, #1
 8004f9c:	429d      	cmp	r5, r3
 8004f9e:	bf38      	it	cc
 8004fa0:	461d      	movcc	r5, r3
 8004fa2:	0553      	lsls	r3, r2, #21
 8004fa4:	d527      	bpl.n	8004ff6 <__ssputs_r+0x8e>
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7ff ff52 	bl	8004e50 <_malloc_r>
 8004fac:	4606      	mov	r6, r0
 8004fae:	b360      	cbz	r0, 800500a <__ssputs_r+0xa2>
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	6921      	ldr	r1, [r4, #16]
 8004fb4:	f000 fafa 	bl	80055ac <memcpy>
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	6126      	str	r6, [r4, #16]
 8004fc6:	444e      	add	r6, r9
 8004fc8:	6026      	str	r6, [r4, #0]
 8004fca:	463e      	mov	r6, r7
 8004fcc:	6165      	str	r5, [r4, #20]
 8004fce:	eba5 0509 	sub.w	r5, r5, r9
 8004fd2:	60a5      	str	r5, [r4, #8]
 8004fd4:	42be      	cmp	r6, r7
 8004fd6:	d900      	bls.n	8004fda <__ssputs_r+0x72>
 8004fd8:	463e      	mov	r6, r7
 8004fda:	4632      	mov	r2, r6
 8004fdc:	4641      	mov	r1, r8
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	f000 faac 	bl	800553c <memmove>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	1b9b      	subs	r3, r3, r6
 8004fea:	60a3      	str	r3, [r4, #8]
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	4433      	add	r3, r6
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	f000 fae6 	bl	80055c8 <_realloc_r>
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d1e0      	bne.n	8004fc4 <__ssputs_r+0x5c>
 8005002:	4650      	mov	r0, sl
 8005004:	6921      	ldr	r1, [r4, #16]
 8005006:	f7ff feb9 	bl	8004d7c <_free_r>
 800500a:	230c      	movs	r3, #12
 800500c:	f8ca 3000 	str.w	r3, [sl]
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800501a:	81a3      	strh	r3, [r4, #12]
 800501c:	e7e9      	b.n	8004ff2 <__ssputs_r+0x8a>
	...

08005020 <_svfiprintf_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4698      	mov	r8, r3
 8005026:	898b      	ldrh	r3, [r1, #12]
 8005028:	4607      	mov	r7, r0
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	460d      	mov	r5, r1
 800502e:	4614      	mov	r4, r2
 8005030:	b09d      	sub	sp, #116	@ 0x74
 8005032:	d510      	bpl.n	8005056 <_svfiprintf_r+0x36>
 8005034:	690b      	ldr	r3, [r1, #16]
 8005036:	b973      	cbnz	r3, 8005056 <_svfiprintf_r+0x36>
 8005038:	2140      	movs	r1, #64	@ 0x40
 800503a:	f7ff ff09 	bl	8004e50 <_malloc_r>
 800503e:	6028      	str	r0, [r5, #0]
 8005040:	6128      	str	r0, [r5, #16]
 8005042:	b930      	cbnz	r0, 8005052 <_svfiprintf_r+0x32>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	b01d      	add	sp, #116	@ 0x74
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	2340      	movs	r3, #64	@ 0x40
 8005054:	616b      	str	r3, [r5, #20]
 8005056:	2300      	movs	r3, #0
 8005058:	9309      	str	r3, [sp, #36]	@ 0x24
 800505a:	2320      	movs	r3, #32
 800505c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005060:	2330      	movs	r3, #48	@ 0x30
 8005062:	f04f 0901 	mov.w	r9, #1
 8005066:	f8cd 800c 	str.w	r8, [sp, #12]
 800506a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005204 <_svfiprintf_r+0x1e4>
 800506e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005072:	4623      	mov	r3, r4
 8005074:	469a      	mov	sl, r3
 8005076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507a:	b10a      	cbz	r2, 8005080 <_svfiprintf_r+0x60>
 800507c:	2a25      	cmp	r2, #37	@ 0x25
 800507e:	d1f9      	bne.n	8005074 <_svfiprintf_r+0x54>
 8005080:	ebba 0b04 	subs.w	fp, sl, r4
 8005084:	d00b      	beq.n	800509e <_svfiprintf_r+0x7e>
 8005086:	465b      	mov	r3, fp
 8005088:	4622      	mov	r2, r4
 800508a:	4629      	mov	r1, r5
 800508c:	4638      	mov	r0, r7
 800508e:	f7ff ff6b 	bl	8004f68 <__ssputs_r>
 8005092:	3001      	adds	r0, #1
 8005094:	f000 80a7 	beq.w	80051e6 <_svfiprintf_r+0x1c6>
 8005098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800509a:	445a      	add	r2, fp
 800509c:	9209      	str	r2, [sp, #36]	@ 0x24
 800509e:	f89a 3000 	ldrb.w	r3, [sl]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 809f 	beq.w	80051e6 <_svfiprintf_r+0x1c6>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b2:	f10a 0a01 	add.w	sl, sl, #1
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	9307      	str	r3, [sp, #28]
 80050ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050be:	931a      	str	r3, [sp, #104]	@ 0x68
 80050c0:	4654      	mov	r4, sl
 80050c2:	2205      	movs	r2, #5
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	484e      	ldr	r0, [pc, #312]	@ (8005204 <_svfiprintf_r+0x1e4>)
 80050ca:	f000 fa61 	bl	8005590 <memchr>
 80050ce:	9a04      	ldr	r2, [sp, #16]
 80050d0:	b9d8      	cbnz	r0, 800510a <_svfiprintf_r+0xea>
 80050d2:	06d0      	lsls	r0, r2, #27
 80050d4:	bf44      	itt	mi
 80050d6:	2320      	movmi	r3, #32
 80050d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050dc:	0711      	lsls	r1, r2, #28
 80050de:	bf44      	itt	mi
 80050e0:	232b      	movmi	r3, #43	@ 0x2b
 80050e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ec:	d015      	beq.n	800511a <_svfiprintf_r+0xfa>
 80050ee:	4654      	mov	r4, sl
 80050f0:	2000      	movs	r0, #0
 80050f2:	f04f 0c0a 	mov.w	ip, #10
 80050f6:	9a07      	ldr	r2, [sp, #28]
 80050f8:	4621      	mov	r1, r4
 80050fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fe:	3b30      	subs	r3, #48	@ 0x30
 8005100:	2b09      	cmp	r3, #9
 8005102:	d94b      	bls.n	800519c <_svfiprintf_r+0x17c>
 8005104:	b1b0      	cbz	r0, 8005134 <_svfiprintf_r+0x114>
 8005106:	9207      	str	r2, [sp, #28]
 8005108:	e014      	b.n	8005134 <_svfiprintf_r+0x114>
 800510a:	eba0 0308 	sub.w	r3, r0, r8
 800510e:	fa09 f303 	lsl.w	r3, r9, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	46a2      	mov	sl, r4
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	e7d2      	b.n	80050c0 <_svfiprintf_r+0xa0>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	1d19      	adds	r1, r3, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	9103      	str	r1, [sp, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	bfbb      	ittet	lt
 8005126:	425b      	neglt	r3, r3
 8005128:	f042 0202 	orrlt.w	r2, r2, #2
 800512c:	9307      	strge	r3, [sp, #28]
 800512e:	9307      	strlt	r3, [sp, #28]
 8005130:	bfb8      	it	lt
 8005132:	9204      	strlt	r2, [sp, #16]
 8005134:	7823      	ldrb	r3, [r4, #0]
 8005136:	2b2e      	cmp	r3, #46	@ 0x2e
 8005138:	d10a      	bne.n	8005150 <_svfiprintf_r+0x130>
 800513a:	7863      	ldrb	r3, [r4, #1]
 800513c:	2b2a      	cmp	r3, #42	@ 0x2a
 800513e:	d132      	bne.n	80051a6 <_svfiprintf_r+0x186>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	3402      	adds	r4, #2
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	9203      	str	r2, [sp, #12]
 800514a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005208 <_svfiprintf_r+0x1e8>
 8005154:	2203      	movs	r2, #3
 8005156:	4650      	mov	r0, sl
 8005158:	7821      	ldrb	r1, [r4, #0]
 800515a:	f000 fa19 	bl	8005590 <memchr>
 800515e:	b138      	cbz	r0, 8005170 <_svfiprintf_r+0x150>
 8005160:	2240      	movs	r2, #64	@ 0x40
 8005162:	9b04      	ldr	r3, [sp, #16]
 8005164:	eba0 000a 	sub.w	r0, r0, sl
 8005168:	4082      	lsls	r2, r0
 800516a:	4313      	orrs	r3, r2
 800516c:	3401      	adds	r4, #1
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005174:	2206      	movs	r2, #6
 8005176:	4825      	ldr	r0, [pc, #148]	@ (800520c <_svfiprintf_r+0x1ec>)
 8005178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800517c:	f000 fa08 	bl	8005590 <memchr>
 8005180:	2800      	cmp	r0, #0
 8005182:	d036      	beq.n	80051f2 <_svfiprintf_r+0x1d2>
 8005184:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <_svfiprintf_r+0x1f0>)
 8005186:	bb1b      	cbnz	r3, 80051d0 <_svfiprintf_r+0x1b0>
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	3307      	adds	r3, #7
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	9303      	str	r3, [sp, #12]
 8005194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005196:	4433      	add	r3, r6
 8005198:	9309      	str	r3, [sp, #36]	@ 0x24
 800519a:	e76a      	b.n	8005072 <_svfiprintf_r+0x52>
 800519c:	460c      	mov	r4, r1
 800519e:	2001      	movs	r0, #1
 80051a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a4:	e7a8      	b.n	80050f8 <_svfiprintf_r+0xd8>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f04f 0c0a 	mov.w	ip, #10
 80051ac:	4619      	mov	r1, r3
 80051ae:	3401      	adds	r4, #1
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	4620      	mov	r0, r4
 80051b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b8:	3a30      	subs	r2, #48	@ 0x30
 80051ba:	2a09      	cmp	r2, #9
 80051bc:	d903      	bls.n	80051c6 <_svfiprintf_r+0x1a6>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0c6      	beq.n	8005150 <_svfiprintf_r+0x130>
 80051c2:	9105      	str	r1, [sp, #20]
 80051c4:	e7c4      	b.n	8005150 <_svfiprintf_r+0x130>
 80051c6:	4604      	mov	r4, r0
 80051c8:	2301      	movs	r3, #1
 80051ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ce:	e7f0      	b.n	80051b2 <_svfiprintf_r+0x192>
 80051d0:	ab03      	add	r3, sp, #12
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	462a      	mov	r2, r5
 80051d6:	4638      	mov	r0, r7
 80051d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <_svfiprintf_r+0x1f4>)
 80051da:	a904      	add	r1, sp, #16
 80051dc:	f3af 8000 	nop.w
 80051e0:	1c42      	adds	r2, r0, #1
 80051e2:	4606      	mov	r6, r0
 80051e4:	d1d6      	bne.n	8005194 <_svfiprintf_r+0x174>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	065b      	lsls	r3, r3, #25
 80051ea:	f53f af2d 	bmi.w	8005048 <_svfiprintf_r+0x28>
 80051ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051f0:	e72c      	b.n	800504c <_svfiprintf_r+0x2c>
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	462a      	mov	r2, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <_svfiprintf_r+0x1f4>)
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	f000 f87d 	bl	80052fc <_printf_i>
 8005202:	e7ed      	b.n	80051e0 <_svfiprintf_r+0x1c0>
 8005204:	080056c2 	.word	0x080056c2
 8005208:	080056c8 	.word	0x080056c8
 800520c:	080056cc 	.word	0x080056cc
 8005210:	00000000 	.word	0x00000000
 8005214:	08004f69 	.word	0x08004f69

08005218 <_printf_common>:
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	4616      	mov	r6, r2
 800521e:	4698      	mov	r8, r3
 8005220:	688a      	ldr	r2, [r1, #8]
 8005222:	690b      	ldr	r3, [r1, #16]
 8005224:	4607      	mov	r7, r0
 8005226:	4293      	cmp	r3, r2
 8005228:	bfb8      	it	lt
 800522a:	4613      	movlt	r3, r2
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005232:	460c      	mov	r4, r1
 8005234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005238:	b10a      	cbz	r2, 800523e <_printf_common+0x26>
 800523a:	3301      	adds	r3, #1
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	0699      	lsls	r1, r3, #26
 8005242:	bf42      	ittt	mi
 8005244:	6833      	ldrmi	r3, [r6, #0]
 8005246:	3302      	addmi	r3, #2
 8005248:	6033      	strmi	r3, [r6, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	f015 0506 	ands.w	r5, r5, #6
 8005250:	d106      	bne.n	8005260 <_printf_common+0x48>
 8005252:	f104 0a19 	add.w	sl, r4, #25
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	6832      	ldr	r2, [r6, #0]
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	42ab      	cmp	r3, r5
 800525e:	dc2b      	bgt.n	80052b8 <_printf_common+0xa0>
 8005260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	3b00      	subs	r3, #0
 8005268:	bf18      	it	ne
 800526a:	2301      	movne	r3, #1
 800526c:	0692      	lsls	r2, r2, #26
 800526e:	d430      	bmi.n	80052d2 <_printf_common+0xba>
 8005270:	4641      	mov	r1, r8
 8005272:	4638      	mov	r0, r7
 8005274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005278:	47c8      	blx	r9
 800527a:	3001      	adds	r0, #1
 800527c:	d023      	beq.n	80052c6 <_printf_common+0xae>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	f003 0306 	and.w	r3, r3, #6
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf14      	ite	ne
 800528a:	2500      	movne	r5, #0
 800528c:	6833      	ldreq	r3, [r6, #0]
 800528e:	f04f 0600 	mov.w	r6, #0
 8005292:	bf08      	it	eq
 8005294:	68e5      	ldreq	r5, [r4, #12]
 8005296:	f104 041a 	add.w	r4, r4, #26
 800529a:	bf08      	it	eq
 800529c:	1aed      	subeq	r5, r5, r3
 800529e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052a2:	bf08      	it	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bfc4      	itt	gt
 80052ac:	1a9b      	subgt	r3, r3, r2
 80052ae:	18ed      	addgt	r5, r5, r3
 80052b0:	42b5      	cmp	r5, r6
 80052b2:	d11a      	bne.n	80052ea <_printf_common+0xd2>
 80052b4:	2000      	movs	r0, #0
 80052b6:	e008      	b.n	80052ca <_printf_common+0xb2>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4652      	mov	r2, sl
 80052bc:	4641      	mov	r1, r8
 80052be:	4638      	mov	r0, r7
 80052c0:	47c8      	blx	r9
 80052c2:	3001      	adds	r0, #1
 80052c4:	d103      	bne.n	80052ce <_printf_common+0xb6>
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ce:	3501      	adds	r5, #1
 80052d0:	e7c1      	b.n	8005256 <_printf_common+0x3e>
 80052d2:	2030      	movs	r0, #48	@ 0x30
 80052d4:	18e1      	adds	r1, r4, r3
 80052d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052e0:	4422      	add	r2, r4
 80052e2:	3302      	adds	r3, #2
 80052e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052e8:	e7c2      	b.n	8005270 <_printf_common+0x58>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4622      	mov	r2, r4
 80052ee:	4641      	mov	r1, r8
 80052f0:	4638      	mov	r0, r7
 80052f2:	47c8      	blx	r9
 80052f4:	3001      	adds	r0, #1
 80052f6:	d0e6      	beq.n	80052c6 <_printf_common+0xae>
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7d9      	b.n	80052b0 <_printf_common+0x98>

080052fc <_printf_i>:
 80052fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	7e0f      	ldrb	r7, [r1, #24]
 8005302:	4691      	mov	r9, r2
 8005304:	2f78      	cmp	r7, #120	@ 0x78
 8005306:	4680      	mov	r8, r0
 8005308:	460c      	mov	r4, r1
 800530a:	469a      	mov	sl, r3
 800530c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800530e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005312:	d807      	bhi.n	8005324 <_printf_i+0x28>
 8005314:	2f62      	cmp	r7, #98	@ 0x62
 8005316:	d80a      	bhi.n	800532e <_printf_i+0x32>
 8005318:	2f00      	cmp	r7, #0
 800531a:	f000 80d3 	beq.w	80054c4 <_printf_i+0x1c8>
 800531e:	2f58      	cmp	r7, #88	@ 0x58
 8005320:	f000 80ba 	beq.w	8005498 <_printf_i+0x19c>
 8005324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800532c:	e03a      	b.n	80053a4 <_printf_i+0xa8>
 800532e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005332:	2b15      	cmp	r3, #21
 8005334:	d8f6      	bhi.n	8005324 <_printf_i+0x28>
 8005336:	a101      	add	r1, pc, #4	@ (adr r1, 800533c <_printf_i+0x40>)
 8005338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800533c:	08005395 	.word	0x08005395
 8005340:	080053a9 	.word	0x080053a9
 8005344:	08005325 	.word	0x08005325
 8005348:	08005325 	.word	0x08005325
 800534c:	08005325 	.word	0x08005325
 8005350:	08005325 	.word	0x08005325
 8005354:	080053a9 	.word	0x080053a9
 8005358:	08005325 	.word	0x08005325
 800535c:	08005325 	.word	0x08005325
 8005360:	08005325 	.word	0x08005325
 8005364:	08005325 	.word	0x08005325
 8005368:	080054ab 	.word	0x080054ab
 800536c:	080053d3 	.word	0x080053d3
 8005370:	08005465 	.word	0x08005465
 8005374:	08005325 	.word	0x08005325
 8005378:	08005325 	.word	0x08005325
 800537c:	080054cd 	.word	0x080054cd
 8005380:	08005325 	.word	0x08005325
 8005384:	080053d3 	.word	0x080053d3
 8005388:	08005325 	.word	0x08005325
 800538c:	08005325 	.word	0x08005325
 8005390:	0800546d 	.word	0x0800546d
 8005394:	6833      	ldr	r3, [r6, #0]
 8005396:	1d1a      	adds	r2, r3, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6032      	str	r2, [r6, #0]
 800539c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053a4:	2301      	movs	r3, #1
 80053a6:	e09e      	b.n	80054e6 <_printf_i+0x1ea>
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	1d19      	adds	r1, r3, #4
 80053ae:	6031      	str	r1, [r6, #0]
 80053b0:	0606      	lsls	r6, r0, #24
 80053b2:	d501      	bpl.n	80053b8 <_printf_i+0xbc>
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	e003      	b.n	80053c0 <_printf_i+0xc4>
 80053b8:	0645      	lsls	r5, r0, #25
 80053ba:	d5fb      	bpl.n	80053b4 <_printf_i+0xb8>
 80053bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	da03      	bge.n	80053cc <_printf_i+0xd0>
 80053c4:	232d      	movs	r3, #45	@ 0x2d
 80053c6:	426d      	negs	r5, r5
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053cc:	230a      	movs	r3, #10
 80053ce:	4859      	ldr	r0, [pc, #356]	@ (8005534 <_printf_i+0x238>)
 80053d0:	e011      	b.n	80053f6 <_printf_i+0xfa>
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	6833      	ldr	r3, [r6, #0]
 80053d6:	0608      	lsls	r0, r1, #24
 80053d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053dc:	d402      	bmi.n	80053e4 <_printf_i+0xe8>
 80053de:	0649      	lsls	r1, r1, #25
 80053e0:	bf48      	it	mi
 80053e2:	b2ad      	uxthmi	r5, r5
 80053e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053e6:	6033      	str	r3, [r6, #0]
 80053e8:	bf14      	ite	ne
 80053ea:	230a      	movne	r3, #10
 80053ec:	2308      	moveq	r3, #8
 80053ee:	4851      	ldr	r0, [pc, #324]	@ (8005534 <_printf_i+0x238>)
 80053f0:	2100      	movs	r1, #0
 80053f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053f6:	6866      	ldr	r6, [r4, #4]
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	bfa8      	it	ge
 80053fc:	6821      	ldrge	r1, [r4, #0]
 80053fe:	60a6      	str	r6, [r4, #8]
 8005400:	bfa4      	itt	ge
 8005402:	f021 0104 	bicge.w	r1, r1, #4
 8005406:	6021      	strge	r1, [r4, #0]
 8005408:	b90d      	cbnz	r5, 800540e <_printf_i+0x112>
 800540a:	2e00      	cmp	r6, #0
 800540c:	d04b      	beq.n	80054a6 <_printf_i+0x1aa>
 800540e:	4616      	mov	r6, r2
 8005410:	fbb5 f1f3 	udiv	r1, r5, r3
 8005414:	fb03 5711 	mls	r7, r3, r1, r5
 8005418:	5dc7      	ldrb	r7, [r0, r7]
 800541a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800541e:	462f      	mov	r7, r5
 8005420:	42bb      	cmp	r3, r7
 8005422:	460d      	mov	r5, r1
 8005424:	d9f4      	bls.n	8005410 <_printf_i+0x114>
 8005426:	2b08      	cmp	r3, #8
 8005428:	d10b      	bne.n	8005442 <_printf_i+0x146>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	07df      	lsls	r7, r3, #31
 800542e:	d508      	bpl.n	8005442 <_printf_i+0x146>
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	6861      	ldr	r1, [r4, #4]
 8005434:	4299      	cmp	r1, r3
 8005436:	bfde      	ittt	le
 8005438:	2330      	movle	r3, #48	@ 0x30
 800543a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800543e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005442:	1b92      	subs	r2, r2, r6
 8005444:	6122      	str	r2, [r4, #16]
 8005446:	464b      	mov	r3, r9
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f8cd a000 	str.w	sl, [sp]
 8005450:	aa03      	add	r2, sp, #12
 8005452:	f7ff fee1 	bl	8005218 <_printf_common>
 8005456:	3001      	adds	r0, #1
 8005458:	d14a      	bne.n	80054f0 <_printf_i+0x1f4>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	b004      	add	sp, #16
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	2778      	movs	r7, #120	@ 0x78
 800546e:	4832      	ldr	r0, [pc, #200]	@ (8005538 <_printf_i+0x23c>)
 8005470:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	6831      	ldr	r1, [r6, #0]
 8005478:	061f      	lsls	r7, r3, #24
 800547a:	f851 5b04 	ldr.w	r5, [r1], #4
 800547e:	d402      	bmi.n	8005486 <_printf_i+0x18a>
 8005480:	065f      	lsls	r7, r3, #25
 8005482:	bf48      	it	mi
 8005484:	b2ad      	uxthmi	r5, r5
 8005486:	6031      	str	r1, [r6, #0]
 8005488:	07d9      	lsls	r1, r3, #31
 800548a:	bf44      	itt	mi
 800548c:	f043 0320 	orrmi.w	r3, r3, #32
 8005490:	6023      	strmi	r3, [r4, #0]
 8005492:	b11d      	cbz	r5, 800549c <_printf_i+0x1a0>
 8005494:	2310      	movs	r3, #16
 8005496:	e7ab      	b.n	80053f0 <_printf_i+0xf4>
 8005498:	4826      	ldr	r0, [pc, #152]	@ (8005534 <_printf_i+0x238>)
 800549a:	e7e9      	b.n	8005470 <_printf_i+0x174>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	f023 0320 	bic.w	r3, r3, #32
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	e7f6      	b.n	8005494 <_printf_i+0x198>
 80054a6:	4616      	mov	r6, r2
 80054a8:	e7bd      	b.n	8005426 <_printf_i+0x12a>
 80054aa:	6833      	ldr	r3, [r6, #0]
 80054ac:	6825      	ldr	r5, [r4, #0]
 80054ae:	1d18      	adds	r0, r3, #4
 80054b0:	6961      	ldr	r1, [r4, #20]
 80054b2:	6030      	str	r0, [r6, #0]
 80054b4:	062e      	lsls	r6, r5, #24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	d501      	bpl.n	80054be <_printf_i+0x1c2>
 80054ba:	6019      	str	r1, [r3, #0]
 80054bc:	e002      	b.n	80054c4 <_printf_i+0x1c8>
 80054be:	0668      	lsls	r0, r5, #25
 80054c0:	d5fb      	bpl.n	80054ba <_printf_i+0x1be>
 80054c2:	8019      	strh	r1, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	4616      	mov	r6, r2
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	e7bc      	b.n	8005446 <_printf_i+0x14a>
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	2100      	movs	r1, #0
 80054d0:	1d1a      	adds	r2, r3, #4
 80054d2:	6032      	str	r2, [r6, #0]
 80054d4:	681e      	ldr	r6, [r3, #0]
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 f859 	bl	8005590 <memchr>
 80054de:	b108      	cbz	r0, 80054e4 <_printf_i+0x1e8>
 80054e0:	1b80      	subs	r0, r0, r6
 80054e2:	6060      	str	r0, [r4, #4]
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	2300      	movs	r3, #0
 80054ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ee:	e7aa      	b.n	8005446 <_printf_i+0x14a>
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	47d0      	blx	sl
 80054fa:	3001      	adds	r0, #1
 80054fc:	d0ad      	beq.n	800545a <_printf_i+0x15e>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	079b      	lsls	r3, r3, #30
 8005502:	d413      	bmi.n	800552c <_printf_i+0x230>
 8005504:	68e0      	ldr	r0, [r4, #12]
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	4298      	cmp	r0, r3
 800550a:	bfb8      	it	lt
 800550c:	4618      	movlt	r0, r3
 800550e:	e7a6      	b.n	800545e <_printf_i+0x162>
 8005510:	2301      	movs	r3, #1
 8005512:	4632      	mov	r2, r6
 8005514:	4649      	mov	r1, r9
 8005516:	4640      	mov	r0, r8
 8005518:	47d0      	blx	sl
 800551a:	3001      	adds	r0, #1
 800551c:	d09d      	beq.n	800545a <_printf_i+0x15e>
 800551e:	3501      	adds	r5, #1
 8005520:	68e3      	ldr	r3, [r4, #12]
 8005522:	9903      	ldr	r1, [sp, #12]
 8005524:	1a5b      	subs	r3, r3, r1
 8005526:	42ab      	cmp	r3, r5
 8005528:	dcf2      	bgt.n	8005510 <_printf_i+0x214>
 800552a:	e7eb      	b.n	8005504 <_printf_i+0x208>
 800552c:	2500      	movs	r5, #0
 800552e:	f104 0619 	add.w	r6, r4, #25
 8005532:	e7f5      	b.n	8005520 <_printf_i+0x224>
 8005534:	080056d3 	.word	0x080056d3
 8005538:	080056e4 	.word	0x080056e4

0800553c <memmove>:
 800553c:	4288      	cmp	r0, r1
 800553e:	b510      	push	{r4, lr}
 8005540:	eb01 0402 	add.w	r4, r1, r2
 8005544:	d902      	bls.n	800554c <memmove+0x10>
 8005546:	4284      	cmp	r4, r0
 8005548:	4623      	mov	r3, r4
 800554a:	d807      	bhi.n	800555c <memmove+0x20>
 800554c:	1e43      	subs	r3, r0, #1
 800554e:	42a1      	cmp	r1, r4
 8005550:	d008      	beq.n	8005564 <memmove+0x28>
 8005552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555a:	e7f8      	b.n	800554e <memmove+0x12>
 800555c:	4601      	mov	r1, r0
 800555e:	4402      	add	r2, r0
 8005560:	428a      	cmp	r2, r1
 8005562:	d100      	bne.n	8005566 <memmove+0x2a>
 8005564:	bd10      	pop	{r4, pc}
 8005566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800556e:	e7f7      	b.n	8005560 <memmove+0x24>

08005570 <_sbrk_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	2300      	movs	r3, #0
 8005574:	4d05      	ldr	r5, [pc, #20]	@ (800558c <_sbrk_r+0x1c>)
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	f7fb fe4a 	bl	8001214 <_sbrk>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_sbrk_r+0x1a>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_sbrk_r+0x1a>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20000388 	.word	0x20000388

08005590 <memchr>:
 8005590:	4603      	mov	r3, r0
 8005592:	b510      	push	{r4, lr}
 8005594:	b2c9      	uxtb	r1, r1
 8005596:	4402      	add	r2, r0
 8005598:	4293      	cmp	r3, r2
 800559a:	4618      	mov	r0, r3
 800559c:	d101      	bne.n	80055a2 <memchr+0x12>
 800559e:	2000      	movs	r0, #0
 80055a0:	e003      	b.n	80055aa <memchr+0x1a>
 80055a2:	7804      	ldrb	r4, [r0, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	428c      	cmp	r4, r1
 80055a8:	d1f6      	bne.n	8005598 <memchr+0x8>
 80055aa:	bd10      	pop	{r4, pc}

080055ac <memcpy>:
 80055ac:	440a      	add	r2, r1
 80055ae:	4291      	cmp	r1, r2
 80055b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b4:	d100      	bne.n	80055b8 <memcpy+0xc>
 80055b6:	4770      	bx	lr
 80055b8:	b510      	push	{r4, lr}
 80055ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055be:	4291      	cmp	r1, r2
 80055c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c4:	d1f9      	bne.n	80055ba <memcpy+0xe>
 80055c6:	bd10      	pop	{r4, pc}

080055c8 <_realloc_r>:
 80055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055cc:	4680      	mov	r8, r0
 80055ce:	4615      	mov	r5, r2
 80055d0:	460c      	mov	r4, r1
 80055d2:	b921      	cbnz	r1, 80055de <_realloc_r+0x16>
 80055d4:	4611      	mov	r1, r2
 80055d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055da:	f7ff bc39 	b.w	8004e50 <_malloc_r>
 80055de:	b92a      	cbnz	r2, 80055ec <_realloc_r+0x24>
 80055e0:	f7ff fbcc 	bl	8004d7c <_free_r>
 80055e4:	2400      	movs	r4, #0
 80055e6:	4620      	mov	r0, r4
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	f000 f81a 	bl	8005624 <_malloc_usable_size_r>
 80055f0:	4285      	cmp	r5, r0
 80055f2:	4606      	mov	r6, r0
 80055f4:	d802      	bhi.n	80055fc <_realloc_r+0x34>
 80055f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055fa:	d8f4      	bhi.n	80055e6 <_realloc_r+0x1e>
 80055fc:	4629      	mov	r1, r5
 80055fe:	4640      	mov	r0, r8
 8005600:	f7ff fc26 	bl	8004e50 <_malloc_r>
 8005604:	4607      	mov	r7, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	d0ec      	beq.n	80055e4 <_realloc_r+0x1c>
 800560a:	42b5      	cmp	r5, r6
 800560c:	462a      	mov	r2, r5
 800560e:	4621      	mov	r1, r4
 8005610:	bf28      	it	cs
 8005612:	4632      	movcs	r2, r6
 8005614:	f7ff ffca 	bl	80055ac <memcpy>
 8005618:	4621      	mov	r1, r4
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff fbae 	bl	8004d7c <_free_r>
 8005620:	463c      	mov	r4, r7
 8005622:	e7e0      	b.n	80055e6 <_realloc_r+0x1e>

08005624 <_malloc_usable_size_r>:
 8005624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005628:	1f18      	subs	r0, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfbc      	itt	lt
 800562e:	580b      	ldrlt	r3, [r1, r0]
 8005630:	18c0      	addlt	r0, r0, r3
 8005632:	4770      	bx	lr

08005634 <_init>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr

08005640 <_fini>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr
